From eb426c622233a793338fee4df9b16a9ef6d779dc Mon Sep 17 00:00:00 2001
From: Tianfei zhang <tianfei.zhang@intel.com>
Date: Mon, 8 Mar 2021 07:05:16 -0500
Subject: [PATCH 53/93] fpga: m10bmc-sec: fix the different offset of doorbell
 register

The offset of doorbell register in max10 is different between
N3000/D5005 Card and PMCI-base FPGA Card. Introducing
macro definition doorbell_reg() to fix it.

Signed-off-by: Tianfei zhang <tianfei.zhang@intel.com>
---
 drivers/fpga/intel-m10-bmc-sec-update.c | 43 +++++++++++++------------
 drivers/mfd/intel-m10-bmc-core.c        |  4 +++
 include/linux/mfd/intel-m10-bmc.h       |  9 ++++++
 3 files changed, 35 insertions(+), 21 deletions(-)

diff --git a/drivers/fpga/intel-m10-bmc-sec-update.c b/drivers/fpga/intel-m10-bmc-sec-update.c
index f6c80da7d179..c016f6064566 100644
--- a/drivers/fpga/intel-m10-bmc-sec-update.c
+++ b/drivers/fpga/intel-m10-bmc-sec-update.c
@@ -46,7 +46,7 @@ static void log_error_regs(struct m10bmc_sec *sec, u32 doorbell)
 
 	dev_err(sec->dev, "RSU error status: 0x%08x\n", doorbell);
 
-	if (!m10bmc_sys_read(sec->m10bmc, M10BMC_AUTH_RESULT, &auth_result))
+	if (!m10bmc_sys_read(sec->m10bmc, auth_result_reg(sec->m10bmc), &auth_result))
 		dev_err(sec->dev, "RSU auth result: 0x%08x\n", auth_result);
 }
 
@@ -62,14 +62,14 @@ static int m10bmc_sec_bmc_image_load(struct m10bmc_sec *sec,
 		return -EINVAL;
 	}
 
-	ret = m10bmc_sys_read(sec->m10bmc, M10BMC_DOORBELL, &doorbell);
+	ret = m10bmc_sys_read(sec->m10bmc, doorbell_reg(sec->m10bmc), &doorbell);
 	if (ret)
 		return ret;
 
 	if (doorbell & DRBL_REBOOT_DISABLED)
 		return -EBUSY;
 
-	return m10bmc_sys_update_bits(sec->m10bmc, M10BMC_DOORBELL,
+	return m10bmc_sys_update_bits(sec->m10bmc, doorbell_reg(sec->m10bmc),
 				     DRBL_CONFIG_SEL | DRBL_REBOOT_REQ,
 				     FIELD_PREP(DRBL_CONFIG_SEL, val) |
 				     DRBL_REBOOT_REQ);
@@ -90,7 +90,7 @@ static int retimer_check_idle(struct m10bmc_sec *sec)
 	u32 doorbell;
 	int ret;
 
-	ret = m10bmc_sys_read(sec->m10bmc, M10BMC_DOORBELL, &doorbell);
+	ret = m10bmc_sys_read(sec->m10bmc, doorbell_reg(sec->m10bmc), &doorbell);
 	if (ret)
 		return -EIO;
 
@@ -110,7 +110,7 @@ static int trigger_retimer_eeprom_load(struct m10bmc_sec *sec)
 	unsigned int val;
 	int ret;
 
-	ret = m10bmc_sys_update_bits(m10bmc, M10BMC_DOORBELL,
+	ret = m10bmc_sys_update_bits(m10bmc, doorbell_reg(m10bmc),
 				     DRBL_PKVL_EEPROM_LOAD_SEC,
 				     DRBL_PKVL_EEPROM_LOAD_SEC);
 	if (ret)
@@ -123,7 +123,7 @@ static int trigger_retimer_eeprom_load(struct m10bmc_sec *sec)
 	 * return an error code.
 	 */
 	ret = regmap_read_poll_timeout(m10bmc->regmap,
-				       M10BMC_SYS_BASE + M10BMC_DOORBELL,
+				       m10bmc_base(m10bmc) + doorbell_reg(m10bmc),
 				       val,
 				       (!(val & DRBL_PKVL_EEPROM_LOAD_SEC)),
 				       M10BMC_PKVL_LOAD_INTERVAL_US,
@@ -131,7 +131,7 @@ static int trigger_retimer_eeprom_load(struct m10bmc_sec *sec)
 	if (ret == -ETIMEDOUT) {
 		dev_err(sec->dev, "%s PKVL_EEPROM_LOAD clear timedout\n",
 			__func__);
-		m10bmc_sys_update_bits(m10bmc, M10BMC_DOORBELL,
+		m10bmc_sys_update_bits(m10bmc, doorbell_reg(m10bmc),
 				       DRBL_PKVL_EEPROM_LOAD_SEC, 0);
 		ret = -ENODEV;
 	} else if (ret) {
@@ -155,7 +155,7 @@ static int poll_retimer_eeprom_load_done(struct m10bmc_sec *sec)
 	 * a successful update.
 	 */
 	ret = regmap_read_poll_timeout(m10bmc->regmap,
-				       M10BMC_SYS_BASE + M10BMC_DOORBELL,
+				       m10bmc_base(m10bmc) + doorbell_reg(m10bmc),
 				       doorbell,
 				       ((rsu_prog(doorbell) ==
 					 RSU_PROG_PKVL_PROM_DONE) ||
@@ -193,7 +193,7 @@ static int poll_retimer_preload_done(struct m10bmc_sec *sec)
 	 * and confirm that the updated firmware is operational
 	 */
 	ret = regmap_read_poll_timeout(m10bmc->regmap,
-				       M10BMC_SYS_BASE + M10BMC_PKVL_POLL_CTRL, val,
+				       m10bmc_base(m10bmc) + M10BMC_PKVL_POLL_CTRL, val,
 				       ((val & M10BMC_PKVL_PRELOAD) == M10BMC_PKVL_PRELOAD),
 				       M10BMC_PKVL_PRELOAD_INTERVAL_US,
 				       M10BMC_PKVL_PRELOAD_TIMEOUT_US);
@@ -486,7 +486,7 @@ static enum fw_upload_err rsu_check_idle(struct m10bmc_sec *sec)
 	u32 doorbell;
 	int ret;
 
-	ret = m10bmc_sys_read(sec->m10bmc, M10BMC_DOORBELL, &doorbell);
+	ret = m10bmc_sys_read(sec->m10bmc, doorbell_reg(sec->m10bmc), &doorbell);
 	if (ret)
 		return FW_UPLOAD_ERR_RW_ERROR;
 
@@ -522,7 +522,7 @@ static enum fw_upload_err rsu_update_init(struct m10bmc_sec *sec)
 	u32 doorbell, status;
 	int ret;
 
-	ret = m10bmc_sys_update_bits(sec->m10bmc, M10BMC_DOORBELL,
+	ret = m10bmc_sys_update_bits(sec->m10bmc, doorbell_reg(sec->m10bmc),
 				     DRBL_RSU_REQUEST | DRBL_HOST_STATUS,
 				     DRBL_RSU_REQUEST |
 				     FIELD_PREP(DRBL_HOST_STATUS,
@@ -531,7 +531,8 @@ static enum fw_upload_err rsu_update_init(struct m10bmc_sec *sec)
 		return FW_UPLOAD_ERR_RW_ERROR;
 
 	ret = regmap_read_poll_timeout(sec->m10bmc->regmap,
-				       M10BMC_SYS_BASE + M10BMC_DOORBELL,
+				       m10bmc_base(sec->m10bmc) +
+				       doorbell_reg(sec->m10bmc),
 				       doorbell,
 				       rsu_start_done(doorbell),
 				       NIOS_HANDSHAKE_INTERVAL_US,
@@ -562,7 +563,7 @@ static enum fw_upload_err rsu_prog_ready(struct m10bmc_sec *sec)
 	u32 doorbell, progress;
 	int ret;
 
-	ret = m10bmc_sys_read(sec->m10bmc, M10BMC_DOORBELL, &doorbell);
+	ret = m10bmc_sys_read(sec->m10bmc, doorbell_reg(sec->m10bmc), &doorbell);
 	if (ret)
 		return FW_UPLOAD_ERR_RW_ERROR;
 
@@ -572,7 +573,7 @@ static enum fw_upload_err rsu_prog_ready(struct m10bmc_sec *sec)
 		if (time_after(jiffies, poll_timeout))
 			break;
 
-		ret = m10bmc_sys_read(sec->m10bmc, M10BMC_DOORBELL, &doorbell);
+		ret = m10bmc_sys_read(sec->m10bmc, doorbell_reg(sec->m10bmc), &doorbell);
 		if (ret)
 			return FW_UPLOAD_ERR_RW_ERROR;
 	}
@@ -594,7 +595,7 @@ static enum fw_upload_err rsu_send_data(struct m10bmc_sec *sec)
 	u32 doorbell;
 	int ret;
 
-	ret = m10bmc_sys_update_bits(sec->m10bmc, M10BMC_DOORBELL,
+	ret = m10bmc_sys_update_bits(sec->m10bmc, doorbell_reg(sec->m10bmc),
 				     DRBL_HOST_STATUS,
 				     FIELD_PREP(DRBL_HOST_STATUS,
 						HOST_STATUS_WRITE_DONE));
@@ -602,7 +603,7 @@ static enum fw_upload_err rsu_send_data(struct m10bmc_sec *sec)
 		return FW_UPLOAD_ERR_RW_ERROR;
 
 	ret = regmap_read_poll_timeout(sec->m10bmc->regmap,
-				       M10BMC_SYS_BASE + M10BMC_DOORBELL,
+				       m10bmc_base(sec->m10bmc) + doorbell_reg(sec->m10bmc),
 				       doorbell,
 				       rsu_prog(doorbell) != RSU_PROG_READY,
 				       NIOS_HANDSHAKE_INTERVAL_US,
@@ -631,7 +632,7 @@ static enum fw_upload_err rsu_send_data(struct m10bmc_sec *sec)
 
 static int rsu_check_complete(struct m10bmc_sec *sec, u32 *doorbell)
 {
-	if (m10bmc_sys_read(sec->m10bmc, M10BMC_DOORBELL, doorbell))
+	if (m10bmc_sys_read(sec->m10bmc, doorbell_reg(sec->m10bmc), doorbell))
 		return -EIO;
 
 	switch (rsu_stat(*doorbell)) {
@@ -663,14 +664,14 @@ static enum fw_upload_err rsu_cancel(struct m10bmc_sec *sec)
 	u32 doorbell;
 	int ret;
 
-	ret = m10bmc_sys_read(sec->m10bmc, M10BMC_DOORBELL, &doorbell);
+	ret = m10bmc_sys_read(sec->m10bmc, doorbell_reg(sec->m10bmc), &doorbell);
 	if (ret)
 		return FW_UPLOAD_ERR_RW_ERROR;
 
 	if (rsu_prog(doorbell) != RSU_PROG_READY)
 		return FW_UPLOAD_ERR_BUSY;
 
-	ret = m10bmc_sys_update_bits(sec->m10bmc, M10BMC_DOORBELL,
+	ret = m10bmc_sys_update_bits(sec->m10bmc, doorbell_reg(sec->m10bmc),
 				     DRBL_HOST_STATUS,
 				     FIELD_PREP(DRBL_HOST_STATUS,
 						HOST_STATUS_ABORT_RSU));
@@ -729,7 +730,7 @@ static enum fw_upload_err m10bmc_sec_write(struct fw_upload *fwl, const u8 *data
 	if (sec->cancel_request)
 		return rsu_cancel(sec);
 
-	ret = m10bmc_sys_read(sec->m10bmc, M10BMC_DOORBELL, &doorbell);
+	ret = m10bmc_sys_read(sec->m10bmc, doorbell_reg(sec->m10bmc), &doorbell);
 	if (ret) {
 		return FW_UPLOAD_ERR_RW_ERROR;
 	} else if (rsu_prog(doorbell) != RSU_PROG_READY) {
@@ -776,7 +777,7 @@ static enum fw_upload_err pmci_sec_write(struct fw_upload *fwl, const u8 *data,
 	if (sec->cancel_request)
 		return rsu_cancel(sec);
 
-	ret = m10bmc_sys_read(m10bmc, M10BMC_DOORBELL, &doorbell);
+	ret = m10bmc_sys_read(m10bmc, doorbell_reg(m10bmc), &doorbell);
 	if (ret) {
 		return FW_UPLOAD_ERR_RW_ERROR;
 	} else if (rsu_prog(doorbell) != RSU_PROG_READY) {
diff --git a/drivers/mfd/intel-m10-bmc-core.c b/drivers/mfd/intel-m10-bmc-core.c
index d03661fa1b7a..b900b651abf1 100644
--- a/drivers/mfd/intel-m10-bmc-core.c
+++ b/drivers/mfd/intel-m10-bmc-core.c
@@ -17,6 +17,8 @@ static const struct m10bmc_csr m10bmc_pmci_csr = {
 	.fw_version = NIOS2_PMCI_FW_VERSION,
 	.mac_low = M10BMC_PMCI_MAC_LOW,
 	.mac_high = M10BMC_PMCI_MAC_HIGH,
+	.doorbell = M10BMC_PMCI_DOORBELL,
+	.auth_result = M10BMC_PMCI_AUTH_RESULT,
 	.bmc_prog_addr = PMCI_BMC_PROG_ADDR,
 	.bmc_reh_addr = PMCI_BMC_REH_ADDR,
 	.bmc_magic = PMCI_BMC_PROG_MAGIC,
@@ -35,6 +37,8 @@ static const struct m10bmc_csr m10bmc_spi_csr = {
 	.fw_version = NIOS2_FW_VERSION,
 	.mac_low = M10BMC_MAC_LOW,
 	.mac_high = M10BMC_MAC_HIGH,
+	.doorbell = M10BMC_DOORBELL,
+	.auth_result = M10BMC_AUTH_RESULT,
 	.bmc_prog_addr = BMC_PROG_ADDR,
 	.bmc_reh_addr = BMC_REH_ADDR,
 	.bmc_magic = BMC_PROG_MAGIC,
diff --git a/include/linux/mfd/intel-m10-bmc.h b/include/linux/mfd/intel-m10-bmc.h
index f3c342a79fb0..c895bdde6f4c 100644
--- a/include/linux/mfd/intel-m10-bmc.h
+++ b/include/linux/mfd/intel-m10-bmc.h
@@ -193,6 +193,9 @@ enum m10bmc_type {
 #define FLASH_NIOS_REQUEST BIT(4)
 #define FLASH_HOST_REQUEST BIT(5)
 
+#define M10BMC_PMCI_DOORBELL 0x1c0
+#define M10BMC_PMCI_AUTH_RESULT 0x1c4
+
 #define M10_FLASH_INT_US       1
 #define M10_FLASH_TIMEOUT_US   10000
 
@@ -211,6 +214,10 @@ enum m10bmc_type {
 
 #define PMCI_STAGING_FLASH_COUNT 0x7ff5000
 
+#define m10bmc_base(m10bmc) ((m10bmc)->csr->base)
+#define doorbell_reg(m10bmc) ((m10bmc)->csr->doorbell)
+#define auth_result_reg(m10bmc) ((m10bmc)->csr->auth_result)
+
 #define bmc_prog_addr(m10bmc) ((m10bmc)->csr->bmc_prog_addr)
 #define bmc_reh_addr(m10bmc) ((m10bmc)->csr->bmc_reh_addr)
 #define bmc_magic(m10bmc) ((m10bmc)->csr->bmc_magic)
@@ -236,6 +243,8 @@ struct m10bmc_csr {
 	unsigned int fw_version;
 	unsigned int mac_low;
 	unsigned int mac_high;
+	unsigned int doorbell;
+	unsigned int auth_result;
 	unsigned int bmc_prog_addr;
 	unsigned int bmc_reh_addr;
 	unsigned int bmc_magic;
-- 
2.39.0

