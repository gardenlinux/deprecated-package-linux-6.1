From 2c75e91b265717de8035ebe81d657cf60ccde5c4 Mon Sep 17 00:00:00 2001
From: Matthew Gerlach <matthew.gerlach@linux.intel.com>
Date: Fri, 18 Feb 2022 11:52:05 -0800
Subject: [PATCH 76/93] mfd: intel-m10-bmc-log: prepare for different
 configurations

Refactor code in preparation for supporting different configurations
of logging support.

Signed-off-by: Matthew Gerlach <matthew.gerlach@linux.intel.com>
---
 drivers/mfd/intel-m10-bmc-log.c | 98 +++++++++++++++++++++++----------
 1 file changed, 69 insertions(+), 29 deletions(-)

diff --git a/drivers/mfd/intel-m10-bmc-log.c b/drivers/mfd/intel-m10-bmc-log.c
index a07ecc646b53..4cea60fc17d3 100644
--- a/drivers/mfd/intel-m10-bmc-log.c
+++ b/drivers/mfd/intel-m10-bmc-log.c
@@ -13,11 +13,23 @@
 #include <linux/nvmem-provider.h>
 #include <linux/mod_devicetable.h>
 
+struct m10bmc_log_cfg {
+	int el_size;
+	unsigned long el_off;
+
+	int id_size;
+	unsigned long id_off;
+
+	int bi_size;
+	unsigned long bi_off;
+};
+
 struct m10bmc_log {
 	struct device *dev;
 	struct intel_m10bmc *m10bmc;
 	unsigned int freq_s;		/* update frequency in seconds */
 	struct delayed_work dwork;
+	struct m10bmc_log_cfg *log_cfg;
 	struct nvmem_device *bmc_event_log_nvmem;
 	struct nvmem_device *fpga_image_dir_nvmem;
 	struct nvmem_device *bom_info_nvmem;
@@ -100,8 +112,8 @@ static int bmc_nvmem_read(struct m10bmc_log *ddata, unsigned int addr,
 	ret = ddata->m10bmc->ops.flash_read(ddata->m10bmc, val,
 					    addr + off, count);
 	if (ret) {
-		dev_err(ddata->dev, "failed to read flash %x\n", addr);
-		return -EIO;
+		dev_err(ddata->dev, "failed to read flash %x (%d)\n", addr, ret);
+		return ret;
 	}
 
 	return 0;
@@ -112,7 +124,7 @@ static int bmc_event_log_nvmem_read(void *priv, unsigned int off,
 {
 	struct m10bmc_log *ddata = priv;
 
-	return bmc_nvmem_read(ddata, PMCI_ERROR_LOG_ADDR, off, val, count);
+	return bmc_nvmem_read(ddata, ddata->log_cfg->el_off, off, val, count);
 }
 
 static int fpga_image_dir_nvmem_read(void *priv, unsigned int off,
@@ -120,7 +132,7 @@ static int fpga_image_dir_nvmem_read(void *priv, unsigned int off,
 {
 	struct m10bmc_log *ddata = priv;
 
-	return bmc_nvmem_read(ddata, PMCI_FPGA_IMAGE_DIR_ADDR, off, val, count);
+	return bmc_nvmem_read(ddata, ddata->log_cfg->id_off, off, val, count);
 }
 
 static int bom_info_nvmem_read(void *priv, unsigned int off,
@@ -128,14 +140,13 @@ static int bom_info_nvmem_read(void *priv, unsigned int off,
 {
 	struct m10bmc_log *ddata = priv;
 
-	return bmc_nvmem_read(ddata, PMCI_BOM_INFO_ADDR, off, val, count);
+	return bmc_nvmem_read(ddata, ddata->log_cfg->bi_off, off, val, count);
 }
 
 static struct nvmem_config bmc_event_log_nvmem_config = {
 	.name = "bmc_event_log",
 	.stride = 4,
 	.word_size = 1,
-	.size = PMCI_ERROR_LOG_SIZE,
 	.reg_read = bmc_event_log_nvmem_read,
 	.id = NVMEM_DEVID_AUTO,
 };
@@ -144,7 +155,6 @@ static struct nvmem_config fpga_image_dir_nvmem_config = {
 	.name = "fpga_image_directory",
 	.stride = 4,
 	.word_size = 1,
-	.size = PMCI_FPGA_IMAGE_DIR_SIZE,
 	.reg_read = fpga_image_dir_nvmem_read,
 	.id = NVMEM_DEVID_AUTO,
 };
@@ -153,13 +163,13 @@ static struct nvmem_config bom_info_nvmem_config = {
 	.name = "bom_info",
 	.stride = 4,
 	.word_size = 1,
-	.size = PMCI_BOM_INFO_SIZE,
 	.reg_read = bom_info_nvmem_read,
 	.id = NVMEM_DEVID_AUTO,
 };
 
 static int m10bmc_log_probe(struct platform_device *pdev)
 {
+	const struct platform_device_id *id = platform_get_device_id(pdev);
 	struct m10bmc_log *ddata;
 	struct nvmem_config nvconfig;
 
@@ -171,33 +181,43 @@ static int m10bmc_log_probe(struct platform_device *pdev)
 	ddata->m10bmc = dev_get_drvdata(pdev->dev.parent);
 	ddata->freq_s = M10BMC_TIMESTAMP_FREQ;
 	INIT_DELAYED_WORK(&ddata->dwork, m10bmc_log_time_sync);
+	ddata->log_cfg = (struct m10bmc_log_cfg *)id->driver_data;
 	dev_set_drvdata(&pdev->dev, ddata);
 
-	m10bmc_log_time_sync(&ddata->dwork.work);
+	if (ddata->log_cfg->el_size > 0) {
+		m10bmc_log_time_sync(&ddata->dwork.work);
 
-	memcpy(&nvconfig, &bmc_event_log_nvmem_config, sizeof(bmc_event_log_nvmem_config));
-	nvconfig.dev = ddata->dev;
-	nvconfig.priv = ddata;
+		memcpy(&nvconfig, &bmc_event_log_nvmem_config, sizeof(bmc_event_log_nvmem_config));
+		nvconfig.dev = ddata->dev;
+		nvconfig.priv = ddata;
+		nvconfig.size = ddata->log_cfg->el_size;
 
-	ddata->bmc_event_log_nvmem = devm_nvmem_register(ddata->dev, &nvconfig);
-	if (IS_ERR(ddata->bmc_event_log_nvmem))
-		return PTR_ERR(ddata->bmc_event_log_nvmem);
+		ddata->bmc_event_log_nvmem = devm_nvmem_register(ddata->dev, &nvconfig);
+		if (IS_ERR(ddata->bmc_event_log_nvmem))
+			return PTR_ERR(ddata->bmc_event_log_nvmem);
+	}
 
-	memcpy(&nvconfig, &fpga_image_dir_nvmem_config, sizeof(fpga_image_dir_nvmem_config));
-	nvconfig.dev = ddata->dev;
-	nvconfig.priv = ddata;
+	if (ddata->log_cfg->id_size > 0) {
+		memcpy(&nvconfig, &fpga_image_dir_nvmem_config, sizeof(fpga_image_dir_nvmem_config));
+		nvconfig.dev = ddata->dev;
+		nvconfig.priv = ddata;
+		nvconfig.size = ddata->log_cfg->id_size;
 
-	ddata->fpga_image_dir_nvmem = devm_nvmem_register(ddata->dev, &nvconfig);
-	if (IS_ERR(ddata->fpga_image_dir_nvmem))
-		return PTR_ERR(ddata->fpga_image_dir_nvmem);
+		ddata->fpga_image_dir_nvmem = devm_nvmem_register(ddata->dev, &nvconfig);
+		if (IS_ERR(ddata->fpga_image_dir_nvmem))
+			return PTR_ERR(ddata->fpga_image_dir_nvmem);
+	}
 
-	memcpy(&nvconfig, &bom_info_nvmem_config, sizeof(bom_info_nvmem_config));
-	nvconfig.dev = ddata->dev;
-	nvconfig.priv = ddata;
+	if (ddata->log_cfg->bi_size > 0) {
+		memcpy(&nvconfig, &bom_info_nvmem_config, sizeof(bom_info_nvmem_config));
+		nvconfig.dev = ddata->dev;
+		nvconfig.priv = ddata;
+		nvconfig.size = ddata->log_cfg->bi_size;
 
-	ddata->bom_info_nvmem = devm_nvmem_register(ddata->dev, &nvconfig);
-	if (IS_ERR(ddata->bom_info_nvmem))
-		return PTR_ERR(ddata->bom_info_nvmem);
+		ddata->bom_info_nvmem = devm_nvmem_register(ddata->dev, &nvconfig);
+		if (IS_ERR(ddata->bom_info_nvmem))
+			return PTR_ERR(ddata->bom_info_nvmem);
+	}
 
 	return 0;
 }
@@ -210,17 +230,37 @@ static int m10bmc_log_remove(struct platform_device *pdev)
 	return 0;
 }
 
+static const struct m10bmc_log_cfg n6000_cfg = {
+	.el_size = PMCI_ERROR_LOG_SIZE,
+	.el_off = PMCI_ERROR_LOG_ADDR,
+
+	.id_size = PMCI_FPGA_IMAGE_DIR_SIZE,
+	.id_off = PMCI_FPGA_IMAGE_DIR_ADDR,
+
+	.bi_size = PMCI_BOM_INFO_SIZE,
+	.bi_off = PMCI_BOM_INFO_ADDR,
+};
+
+static const struct platform_device_id intel_m10bmc_log_ids[] = {
+	{
+		.name = "n6000bmc-log",
+		.driver_data = (unsigned long)&n6000_cfg,
+	},
+	{ }
+};
+
 static struct platform_driver intel_m10bmc_log_driver = {
 	.probe = m10bmc_log_probe,
 	.remove = m10bmc_log_remove,
 	.driver = {
-		.name = "n6000bmc-log",
+		.name = "intel-m10-bmc-log",
 		.dev_groups = m10bmc_log_groups,
 	},
+	.id_table = intel_m10bmc_log_ids,
 };
 module_platform_driver(intel_m10bmc_log_driver);
 
-MODULE_ALIAS("platform:n6000bmc-log");
+MODULE_DEVICE_TABLE(platform, intel_m10bmc_log_ids);
 MODULE_AUTHOR("Intel Corporation");
 MODULE_DESCRIPTION("Intel MAX10 BMC Log");
 MODULE_LICENSE("GPL v2");
-- 
2.39.0

