From 0c3156b0d770548e8bcc7764b280b0bdf5128595 Mon Sep 17 00:00:00 2001
From: Tianfei zhang <Tianfei.zhang@intel.com>
Date: Thu, 13 Jan 2022 16:07:34 +0800
Subject: [PATCH] fpga: m10bmc-sec: PR/SR root key hash support for VAB
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Add support for reading the Secure Device Manager (SDM) PR/SR
Root Entry Hash and Cancellation Key. This support is required
for Vender Authenticated Boot (VAB).

Co-developed-by: Tianfei zhang <Tianfei.zhang@intel.com>
Signed-off-by: Tianfei zhang <Tianfei.zhang@intel.com>
Signed-off-by: Ilpo JÃ¤rvinen <ilpo.jarvinen@linux.intel.com>
---
 .../sysfs-driver-intel-m10-bmc-sec-update     | 37 +++++++++
 drivers/fpga/intel-m10-bmc-sec-update.c       | 77 ++++++++++++++++++-
 drivers/mfd/intel-m10-bmc-pmci.c              |  4 +
 include/linux/mfd/intel-m10-bmc.h             |  9 +++
 4 files changed, 126 insertions(+), 1 deletion(-)

diff --git a/Documentation/ABI/testing/sysfs-driver-intel-m10-bmc-sec-update b/Documentation/ABI/testing/sysfs-driver-intel-m10-bmc-sec-update
index 0872d80bb1ee..b516436b2889 100644
--- a/Documentation/ABI/testing/sysfs-driver-intel-m10-bmc-sec-update
+++ b/Documentation/ABI/testing/sysfs-driver-intel-m10-bmc-sec-update
@@ -148,3 +148,40 @@ Contact:	Tianfei zhang <tianfei.zhang@intel.com>
 Description:	Read-only. Reading this file will return the name of image booted
 		from FPGA. The EINVAL error code will be returned if no image booted
 		from FPGA.
+
+What:		/sys/bus/platform/drivers/intel-m10bmc-sec-update/.../security/sr_sdm_root_entry_hash
+Date:		Jan 2022
+KernelVersion:	5.16
+Contact:	Tianfei Zhang <tianfei.zhang@intel.com>
+Description:	Read only. Returns the root entry hash of SDM (Secure Device
+		Manager) for the static region if one is programmed, else it
+		returns the string: "hash not programmed".  This file is only
+		visible if the underlying device supports it.
+		Format: "0x%x".
+
+What:		/sys/bus/platform/drivers/intel-m10bmc-sec-update/.../security/pr_sdm_root_entry_hash
+Date:		Jan 2022
+KernelVersion:	5.16
+Contact:	Tianfei Zhang <tianfei.zhang@intel.com>
+Description:	Read only. Returns the root entry hash of SDM (Secure Device
+		Manager) for the partial reconfiguration region if one is programmed,
+		else it returns the string: "hash not programmed".  This file
+		is only visible if the underlying device supports it.
+		Format: "0x%x".
+
+What:		/sys/bus/platform/drivers/intel-m10bmc-sec-update/.../security/pr_sdm_canceled_csks
+Date:		Jan 2022
+KernelVersion:	5.16
+Contact:	Tianfei Zhang <tianfei.zhang@intel.com>
+Description:	Read only. Returns a list of indices for canceled code
+		signing keys of SDM (Secure Device Manager) for the partial
+		reconfiguration region. The standard bitmap list format is
+		used (e.g. "1,2-6,9").
+
+What:		/sys/bus/platform/drivers/intel-m10bmc-sec-update/.../security/sr_sdm_canceled_csks
+Date:		Jan 2022
+KernelVersion:	5.16
+Contact:	Tianfei Zhang <tianfei.zhang@intel.com>
+Description:	Read only. Returns a list of indices for canceled code
+		signing keys of SDM (Secure Device Manager) for the static
+		region. The standard bitmap list format is used (e.g. "1,2-6,9").
diff --git a/drivers/fpga/intel-m10-bmc-sec-update.c b/drivers/fpga/intel-m10-bmc-sec-update.c
index 1471b9c3194d..25656568501b 100644
--- a/drivers/fpga/intel-m10-bmc-sec-update.c
+++ b/drivers/fpga/intel-m10-bmc-sec-update.c
@@ -593,6 +593,44 @@ DEVICE_ATTR_SEC_REH_RO(bmc);
 DEVICE_ATTR_SEC_REH_RO(sr);
 DEVICE_ATTR_SEC_REH_RO(pr);
 
+#define SDM_ROOT_HASH_REG_NUM 12
+
+static ssize_t
+show_sdm_root_entry_hash(struct device *dev, u32 start, char *buf)
+{
+	struct m10bmc_sec *sec = dev_get_drvdata(dev);
+	const struct m10bmc_csr_map *csr_map = sec->m10bmc->info->csr_map;
+	int i, cnt, ret;
+	u32 key;
+
+	cnt = sprintf(buf, "0x");
+	for (i = 0; i < SDM_ROOT_HASH_REG_NUM; i++) {
+		ret = m10bmc_sys_read(sec->m10bmc, csr_map->base + start + i * 4, &key);
+		if (ret)
+			return ret;
+
+		cnt += sprintf(buf + cnt, "%08x", key);
+	}
+	cnt += sprintf(buf + cnt, "\n");
+
+	return cnt;
+}
+
+#define DEVICE_ATTR_SDM_SEC_REH_RO(_name)					\
+static ssize_t _name##_sdm_root_entry_hash_show(struct device *dev,		\
+					    struct device_attribute *attr,	\
+					    char *buf)				\
+{										\
+	struct m10bmc_sec *sec = dev_get_drvdata(dev);				\
+	const struct m10bmc_csr_map *csr_map = sec->m10bmc->info->csr_map;	\
+										\
+	return show_sdm_root_entry_hash(dev, csr_map->_name##_sdm_reh_reg, buf);\
+}										\
+static DEVICE_ATTR_RO(_name##_sdm_root_entry_hash)
+
+DEVICE_ATTR_SDM_SEC_REH_RO(pr);
+DEVICE_ATTR_SDM_SEC_REH_RO(sr);
+
 #define CSK_BIT_LEN		128U
 #define CSK_32ARRAY_SIZE	DIV_ROUND_UP(CSK_BIT_LEN, 32)
 
@@ -640,6 +678,35 @@ DEVICE_ATTR_SEC_CSK_RO(bmc);
 DEVICE_ATTR_SEC_CSK_RO(sr);
 DEVICE_ATTR_SEC_CSK_RO(pr);
 
+static ssize_t
+show_sdm_canceled_csk(struct device *dev, u32 addr, char *buf)
+{
+	struct m10bmc_sec *sec = dev_get_drvdata(dev);
+	const struct m10bmc_csr_map *csr_map = sec->m10bmc->info->csr_map;
+	int ret;
+	u32 val;
+
+	ret = m10bmc_sys_read(sec->m10bmc, csr_map->base + addr, &val);
+	if (ret)
+		return ret;
+
+	return sysfs_emit(buf, "%08x\n", val);
+}
+
+#define DEVICE_ATTR_SDM_SEC_CSK_RO(_name)					\
+static ssize_t _name##_sdm_canceled_csks_show(struct device *dev,		\
+					  struct device_attribute *attr,	\
+					  char *buf)				\
+{										\
+	struct m10bmc_sec *sec = dev_get_drvdata(dev);				\
+	const struct m10bmc_csr_map *csr_map = sec->m10bmc->info->csr_map;	\
+										\
+	return show_sdm_canceled_csk(dev, csr_map->_name##_sdm_csk_reg, buf);	\
+}										\
+static DEVICE_ATTR_RO(_name##_sdm_canceled_csks)
+DEVICE_ATTR_SDM_SEC_CSK_RO(pr);
+DEVICE_ATTR_SDM_SEC_CSK_RO(sr);
+
 #define FLASH_COUNT_SIZE 4096	/* count stored as inverted bit vector */
 
 static ssize_t flash_count_show(struct device *dev,
@@ -747,7 +814,11 @@ m10bmc_security_is_visible(struct kobject *kobj, struct attribute *attr, int n)
 	    (attr == &dev_attr_sdm_sr_provision_status.attr ||
 	     attr == &dev_attr_sdm_sr_cancel_status.attr ||
 	     attr == &dev_attr_sdm_pr_provision_status.attr ||
-	     attr == &dev_attr_sdm_pr_cancel_status.attr))
+	     attr == &dev_attr_sdm_pr_cancel_status.attr ||
+	     attr == &dev_attr_pr_sdm_root_entry_hash.attr ||
+	     attr == &dev_attr_pr_sdm_canceled_csks.attr ||
+	     attr == &dev_attr_sr_sdm_root_entry_hash.attr ||
+	     attr == &dev_attr_sr_sdm_canceled_csks.attr))
 		return 0;
 
 	return attr->mode;
@@ -765,6 +836,10 @@ static struct attribute *m10bmc_security_attrs[] = {
 	&dev_attr_sdm_sr_cancel_status.attr,
 	&dev_attr_sdm_pr_provision_status.attr,
 	&dev_attr_sdm_pr_cancel_status.attr,
+	&dev_attr_pr_sdm_root_entry_hash.attr,
+	&dev_attr_pr_sdm_canceled_csks.attr,
+	&dev_attr_sr_sdm_root_entry_hash.attr,
+	&dev_attr_sr_sdm_canceled_csks.attr,
 	NULL,
 };
 
diff --git a/drivers/mfd/intel-m10-bmc-pmci.c b/drivers/mfd/intel-m10-bmc-pmci.c
index 2cba25e4b553..3998a9ad31f2 100644
--- a/drivers/mfd/intel-m10-bmc-pmci.c
+++ b/drivers/mfd/intel-m10-bmc-pmci.c
@@ -275,6 +275,10 @@ static const struct m10bmc_csr_map m10bmc_n6000_csr_map = {
 	.pr_reh_addr = M10BMC_N6000_PR_REH_ADDR,
 	.pr_magic = M10BMC_N6000_PR_PROG_MAGIC,
 	.rsu_update_counter = M10BMC_N6000_STAGING_FLASH_COUNT,
+	.pr_sdm_reh_reg = M10BMC_PMCI_PR_RH0,
+	.pr_sdm_csk_reg = M10BMC_PMCI_PR_CSK,
+	.sr_sdm_reh_reg = M10BMC_PMCI_SR_RH0,
+	.sr_sdm_csk_reg = M10BMC_PMCI_SR_CSK,
 };
 
 static const struct intel_m10bmc_platform_info m10bmc_pmci_n6000 = {
diff --git a/include/linux/mfd/intel-m10-bmc.h b/include/linux/mfd/intel-m10-bmc.h
index ddc04d71ca74..55447719f2ba 100644
--- a/include/linux/mfd/intel-m10-bmc.h
+++ b/include/linux/mfd/intel-m10-bmc.h
@@ -244,6 +244,11 @@
 #define M10BMC_PMCI_CERT_PROG_STS		0x824
 #define M10BMC_PMCI_CERT_SPEC_STS		0x828
 
+#define M10BMC_PMCI_SR_RH0			0x848
+#define M10BMC_PMCI_SR_CSK			0x878
+#define M10BMC_PMCI_PR_RH0			0x87c
+#define M10BMC_PMCI_PR_CSK			0x8ac
+
 #define M10BMC_N6000_BUILD_VER			0x0
 #define NIOS2_N6000_FW_VERSION			0x4
 #define M10BMC_N6000_MAC_LOW			0x20
@@ -324,6 +329,10 @@ struct m10bmc_csr_map {
 	unsigned int pr_reh_addr;
 	unsigned int pr_magic;
 	unsigned int rsu_update_counter;
+	unsigned int pr_sdm_reh_reg;
+	unsigned int pr_sdm_csk_reg;
+	unsigned int sr_sdm_reh_reg;
+	unsigned int sr_sdm_csk_reg;
 };
 
 /**
