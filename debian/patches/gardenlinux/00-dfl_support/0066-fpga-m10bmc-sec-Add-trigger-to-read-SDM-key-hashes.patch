From f3e691263fbcbf2c240ed9164c66647336b18387 Mon Sep 17 00:00:00 2001
From: Tianfei Zhang <tianfei.zhang@intel.com>
Date: Fri, 8 Jul 2022 22:36:14 +0800
Subject: [PATCH] fpga: m10bmc-sec: Add trigger to read SDM key hashes
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Trigger the reading of the SDM key hashes to BMC registers during driver
initialization and check for completion of the read before completing
a sysfs read for the same data. The SDM trigger is executed in a
worker thread and flush_work() is used to guarantee that the work
has completed before responding to a sysfs read of the data.

Signed-off-by: Tianfei Zhang <tianfei.zhang@intel.com>
Signed-off-by: Russ Weight <russell.h.weight@intel.com>
Signed-off-by: Ilpo JÃ¤rvinen <ilpo.jarvinen@linux.intel.com>
---
 drivers/fpga/intel-m10-bmc-sec-update.c | 80 +++++++++++++++++++++++++
 include/linux/mfd/intel-m10-bmc.h       | 12 ++++
 2 files changed, 92 insertions(+)

diff --git a/drivers/fpga/intel-m10-bmc-sec-update.c b/drivers/fpga/intel-m10-bmc-sec-update.c
index 25656568501b..7a13e33d5248 100644
--- a/drivers/fpga/intel-m10-bmc-sec-update.c
+++ b/drivers/fpga/intel-m10-bmc-sec-update.c
@@ -56,6 +56,7 @@ struct m10bmc_sec {
 	u32 fw_name_id;
 	bool cancel_request;
 	const struct m10bmc_sec_ops *ops;
+	struct work_struct work;
 };
 
 static void log_error_regs(struct m10bmc_sec *sec, u32 doorbell)
@@ -595,6 +596,72 @@ DEVICE_ATTR_SEC_REH_RO(pr);
 
 #define SDM_ROOT_HASH_REG_NUM 12
 
+static int sdm_check_config_status(struct m10bmc_sec *sec)
+{
+	struct intel_m10bmc *m10bmc = sec->m10bmc;
+	u32 val;
+	int ret;
+
+	ret = m10bmc_sys_read(m10bmc, M10BMC_PMCI_SDM_CTRL, &val);
+	if (ret)
+		return -EIO;
+
+	return FIELD_GET(SDM_CMD_DONE, val);
+}
+
+static int sdm_trigger_prov_data(struct m10bmc_sec *sec)
+{
+	const struct m10bmc_csr_map *csr_map = sec->m10bmc->info->csr_map;
+	struct intel_m10bmc *m10bmc = sec->m10bmc;
+	u32 cmd = 0;
+	int ret;
+
+	ret = m10bmc_sys_update_bits(m10bmc,
+				     M10BMC_PMCI_SDM_CTRL,
+				     SDM_CMD_SELECT,
+				     FIELD_PREP(SDM_CMD_SELECT, SDM_CMD_PROV_DATA));
+	if (ret)
+		return ret;
+
+	ret = m10bmc_sys_update_bits(m10bmc,
+				     M10BMC_PMCI_SDM_CTRL,
+				     SDM_CMD_TRIGGER, SDM_CMD_TRIGGER);
+	if (ret)
+		return ret;
+
+	ret = regmap_read_poll_timeout(m10bmc->regmap,
+				       csr_map->base + M10BMC_PMCI_SDM_CTRL,
+				       cmd, sdm_status(cmd) == SDM_CMD_STATUS_IDLE,
+				       NIOS_HANDSHAKE_INTERVAL_US,
+				       NIOS_HANDSHAKE_TIMEOUT_US);
+	if (ret) {
+		dev_err(sec->dev, "Error polling SDM CTRL register: %d\n", ret);
+		return ret;
+	} else if (sdm_error(cmd) != SDM_CMD_SUCC) {
+		dev_err(sec->dev, "SDM trigger failure: %ld\n", sdm_error(cmd));
+		return -EIO;
+	}
+
+	ret = regmap_read_poll_timeout(m10bmc->regmap,
+				       csr_map->base + M10BMC_PMCI_SDM_CTRL,
+				       cmd, (cmd & SDM_CMD_DONE),
+				       NIOS_HANDSHAKE_INTERVAL_US,
+				       2 * NIOS_HANDSHAKE_TIMEOUT_US);
+	if (ret) {
+		dev_err(sec->dev, "Error polling for SDM operation done: %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static void sdm_work(struct work_struct *work)
+{
+	struct m10bmc_sec *sec = container_of(work, struct m10bmc_sec, work);
+
+	sdm_trigger_prov_data(sec);
+}
+
 static ssize_t
 show_sdm_root_entry_hash(struct device *dev, u32 start, char *buf)
 {
@@ -603,6 +670,11 @@ show_sdm_root_entry_hash(struct device *dev, u32 start, char *buf)
 	int i, cnt, ret;
 	u32 key;
 
+	flush_work(&sec->work);
+
+	if (sdm_check_config_status(sec) <= 0)
+		return -EIO;
+
 	cnt = sprintf(buf, "0x");
 	for (i = 0; i < SDM_ROOT_HASH_REG_NUM; i++) {
 		ret = m10bmc_sys_read(sec->m10bmc, csr_map->base + start + i * 4, &key);
@@ -1543,6 +1615,11 @@ static int m10bmc_sec_probe(struct platform_device *pdev)
 	sec->ops = (struct m10bmc_sec_ops *)platform_get_device_id(pdev)->driver_data;
 	dev_set_drvdata(&pdev->dev, sec);
 
+	if (sec->ops->sec_visible) {
+		INIT_WORK(&sec->work, sdm_work);
+		queue_work(system_long_wq, &sec->work);
+	}
+
 	ret = xa_alloc(&fw_upload_xa, &sec->fw_name_id, sec,
 		       xa_limit_32b, GFP_KERNEL);
 	if (ret)
@@ -1578,6 +1655,9 @@ static int m10bmc_sec_remove(struct platform_device *pdev)
 {
 	struct m10bmc_sec *sec = dev_get_drvdata(&pdev->dev);
 
+	if (sec->ops->sec_visible)
+		flush_work(&sec->work);
+
 	firmware_upload_unregister(sec->fwl);
 	kfree(sec->fw_name);
 	xa_erase(&fw_upload_xa, sec->fw_name_id);
diff --git a/include/linux/mfd/intel-m10-bmc.h b/include/linux/mfd/intel-m10-bmc.h
index 55447719f2ba..9c4a5e6255d9 100644
--- a/include/linux/mfd/intel-m10-bmc.h
+++ b/include/linux/mfd/intel-m10-bmc.h
@@ -228,6 +228,18 @@
 #define PMCI_SDM_SR_IMG_REQ			BIT(0)
 #define PMCI_SDM_SR_PGM_ERROR			GENMASK(23, 16)
 
+#define M10BMC_PMCI_SDM_CTRL			0x234
+#define SDM_CMD_TRIGGER				BIT(0)
+#define SDM_CMD_DONE				BIT(2)
+#define SDM_CMD_SELECT				GENMASK(11, 4)
+#define SDM_CMD_PROV_DATA			0x3
+#define SDM_CMD_STATUS				GENMASK(15, 12)
+#define sdm_status(cmd)				FIELD_GET(SDM_CMD_STATUS, cmd)
+#define SDM_CMD_STATUS_IDLE			0x0
+#define SDM_CMD_ERROR				GENMASK(23, 16)
+#define sdm_error(cmd)				FIELD_GET(SDM_CMD_ERROR, cmd)
+#define SDM_CMD_SUCC				0x0
+
 #define M10BMC_PMCI_SDM_PR_CTRL_STS		0x238
 #define PMCI_SDM_PR_IMG_REQ			BIT(0)
 #define PMCI_SDM_PR_PGM_ERROR			GENMASK(23, 16)
