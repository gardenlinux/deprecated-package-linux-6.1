From aafac2724f97bcc314d10221f75f21425825bcdf Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Martin=20Hundeb=C3=B8ll?= <mhu@silicom.dk>
Date: Mon, 1 Feb 2021 13:20:47 +0100
Subject: [PATCH] net: ethernet: silicom: add n5010-phy driver
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The n5010 PAC uses its board management controller to some aspects of
the line-side handling. Add a driver to setup a fixed link phy for the
n5010-hssi network driver.

Co-developed-by: Martin Hundebøll <mhu@silicom.dk>
Signed-off-by: Martin Hundebøll <mhu@silicom.dk>
Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
---
 MAINTAINERS                              |   6 +
 drivers/mfd/intel-m10-bmc-spi.c          |   1 +
 drivers/net/ethernet/Kconfig             |   1 +
 drivers/net/ethernet/Makefile            |   1 +
 drivers/net/ethernet/silicom/Kconfig     |  27 +++
 drivers/net/ethernet/silicom/Makefile    |   6 +
 drivers/net/ethernet/silicom/n5010-phy.c | 235 +++++++++++++++++++++++
 drivers/net/ethernet/silicom/n5010-phy.h |  16 ++
 8 files changed, 293 insertions(+)
 create mode 100644 drivers/net/ethernet/silicom/Kconfig
 create mode 100644 drivers/net/ethernet/silicom/Makefile
 create mode 100644 drivers/net/ethernet/silicom/n5010-phy.c
 create mode 100644 drivers/net/ethernet/silicom/n5010-phy.h

diff --git a/MAINTAINERS b/MAINTAINERS
index fc6dc757d40c..eaa1b537004d 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -18843,6 +18843,12 @@ S:	Maintained
 F:	drivers/input/touchscreen/silead.c
 F:	drivers/platform/x86/touchscreen_dmi.c
 
+SILICOM PAC N5010 DRIVER
+M:	Esa Leskinen <ele@silicom.dk>
+L:	netdev@vger.kernel.org
+S:	Maintained
+F:	drivers/net/ethernet/silicom/n5010-phy.c
+
 SILICON LABS WIRELESS DRIVERS (for WFxxx series)
 M:	Jérôme Pouiller <jerome.pouiller@silabs.com>
 S:	Supported
diff --git a/drivers/mfd/intel-m10-bmc-spi.c b/drivers/mfd/intel-m10-bmc-spi.c
index 6c2e17409783..69f7de24a0f5 100644
--- a/drivers/mfd/intel-m10-bmc-spi.c
+++ b/drivers/mfd/intel-m10-bmc-spi.c
@@ -133,6 +133,7 @@ static const struct regmap_range m10bmc_n3000_fw_handshake_regs[] = {
 static struct mfd_cell m10bmc_n5010_subdevs[] = {
 	{ .name = "n5010bmc-hwmon" },
 	{ .name = "n5010bmc-sec-update" },
+	{ .name = "n5010bmc-phy" },
 };
 
 static const struct intel_m10bmc_platform_info m10bmc_spi_n3000 = {
diff --git a/drivers/net/ethernet/Kconfig b/drivers/net/ethernet/Kconfig
index 1917da784191..230214cf34cc 100644
--- a/drivers/net/ethernet/Kconfig
+++ b/drivers/net/ethernet/Kconfig
@@ -175,6 +175,7 @@ source "drivers/net/ethernet/samsung/Kconfig"
 source "drivers/net/ethernet/seeq/Kconfig"
 source "drivers/net/ethernet/sgi/Kconfig"
 source "drivers/net/ethernet/silan/Kconfig"
+source "drivers/net/ethernet/silicom/Kconfig"
 source "drivers/net/ethernet/sis/Kconfig"
 source "drivers/net/ethernet/sfc/Kconfig"
 source "drivers/net/ethernet/smsc/Kconfig"
diff --git a/drivers/net/ethernet/Makefile b/drivers/net/ethernet/Makefile
index 0d872d4efcd1..50aa464460e9 100644
--- a/drivers/net/ethernet/Makefile
+++ b/drivers/net/ethernet/Makefile
@@ -84,6 +84,7 @@ obj-$(CONFIG_NET_VENDOR_ROCKER) += rocker/
 obj-$(CONFIG_NET_VENDOR_SAMSUNG) += samsung/
 obj-$(CONFIG_NET_VENDOR_SEEQ) += seeq/
 obj-$(CONFIG_NET_VENDOR_SILAN) += silan/
+obj-$(CONFIG_NET_VENDOR_SILICOM) += silicom/
 obj-$(CONFIG_NET_VENDOR_SIS) += sis/
 obj-$(CONFIG_NET_VENDOR_SOLARFLARE) += sfc/
 obj-$(CONFIG_NET_VENDOR_SGI) += sgi/
diff --git a/drivers/net/ethernet/silicom/Kconfig b/drivers/net/ethernet/silicom/Kconfig
new file mode 100644
index 000000000000..e12a6901ceee
--- /dev/null
+++ b/drivers/net/ethernet/silicom/Kconfig
@@ -0,0 +1,27 @@
+# SPDX-License-Identifier: GPL-2.0-only
+#
+# Silicom network device configuration
+#
+
+config NET_VENDOR_SILICOM
+	bool "Silicom devices"
+	default y
+	help
+	  If you have a network (Ethernet) card belonging to this class, say Y.
+
+	  Note that the answer to this question doesn't directly affect the
+	  kernel: saying N will just cause the configurator to skip all
+	  the questions about Silicom cards. If you say Y, you will be asked for
+	  your specific card in the following questions.
+
+if NET_VENDOR_SILICOM
+
+config N5010_PHY
+	tristate "Fixed Phy Driver for Silicom PAC N5010"
+	depends on MFD_INTEL_M10_BMC_CORE && FIXED_PHY
+	help
+	  The n5010 card consists of a primary FPGA running the network controller,
+	  and a side-fpga running the board management controller (bmc). This driver
+	  reads status bits and controls link LEDs via the bmc.
+
+endif # NET_VENDOR_SILICOM
diff --git a/drivers/net/ethernet/silicom/Makefile b/drivers/net/ethernet/silicom/Makefile
new file mode 100644
index 000000000000..c51cd4b4c517
--- /dev/null
+++ b/drivers/net/ethernet/silicom/Makefile
@@ -0,0 +1,6 @@
+# SPDX-License-Identifier: GPL-2.0
+#
+# Makefile for the Silicom network device drivers.
+#
+
+obj-$(CONFIG_N5010_PHY) += n5010-phy.o
diff --git a/drivers/net/ethernet/silicom/n5010-phy.c b/drivers/net/ethernet/silicom/n5010-phy.c
new file mode 100644
index 000000000000..f094749b3a01
--- /dev/null
+++ b/drivers/net/ethernet/silicom/n5010-phy.c
@@ -0,0 +1,235 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Intel Max10 BMC Lightning Creek phy Driver
+ *
+ * Copyright (C) 2020 Silicom Denmark A/S. All rights reserved.
+ */
+#include <linux/bits.h>
+#include <linux/device.h>
+#include <linux/mfd/intel-m10-bmc.h>
+#include <linux/mod_devicetable.h>
+#include <linux/module.h>
+#include <linux/netdevice.h>
+#include <linux/phy.h>
+#include <linux/phy_fixed.h>
+#include <linux/platform_device.h>
+
+#include "n5010-phy.h"
+
+#define N5010_PHY_CSR_0		0x40c
+#define N5010_PHY_CSR_1		0x410
+
+#define N5010_PHY_ABSENT_0	BIT(7)
+#define N5010_PHY_ABSENT_1	BIT(23)
+
+#define N5010_PHY_LED_0		GENMASK(5, 3)
+#define N5010_PHY_LED_1		GENMASK(21, 19)
+
+struct n5010_phy {
+	struct intel_m10bmc *m10bmc;
+};
+
+struct n5010_port {
+	u64 num;
+	bool sfp_in;
+	struct n5010_phy *priv;
+	struct phy_device *phy;
+	bool (*get_link)(struct net_device *netdev);
+};
+
+static struct fixed_phy_status n5010_phy_status = {
+	.link = 0,
+	.speed = 1000,
+	.duplex = 1,
+};
+
+static int n5010_phy_sfp_status(struct n5010_port *port)
+{
+	unsigned int offset, bit, val;
+	int ret;
+
+	switch (port->num) {
+	case 0:
+		offset = N5010_PHY_CSR_1;
+		bit = N5010_PHY_ABSENT_0;
+		break;
+	case 1:
+		offset = N5010_PHY_CSR_1;
+		bit = N5010_PHY_ABSENT_1;
+		break;
+	case 2:
+		offset = N5010_PHY_CSR_0;
+		bit = N5010_PHY_ABSENT_0;
+		break;
+	case 3:
+		offset = N5010_PHY_CSR_0;
+		bit = N5010_PHY_ABSENT_1;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	ret = m10bmc_sys_read(port->priv->m10bmc, offset, &val);
+	if (ret)
+		return ret;
+
+	port->sfp_in = !(val & bit);
+
+	return 0;
+}
+
+static int n5010_phy_set_led(struct n5010_port *port, bool link)
+{
+	unsigned int offset, mask, val;
+
+	switch (port->num) {
+	case 0:
+		offset = N5010_PHY_CSR_1;
+		mask = N5010_PHY_LED_0;
+		break;
+	case 1:
+		offset = N5010_PHY_CSR_1;
+		mask = N5010_PHY_LED_1;
+		break;
+	case 2:
+		offset = N5010_PHY_CSR_0;
+		mask = N5010_PHY_LED_0;
+		break;
+	case 3:
+		offset = N5010_PHY_CSR_0;
+		mask = N5010_PHY_LED_1;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	val = link ? mask : 0;
+
+	return m10bmc_sys_update_bits(port->priv->m10bmc, offset, mask, val);
+}
+
+static void n5010_phy_adjust_link(struct net_device *netdev)
+{
+	struct n5010_port *port = netdev->phydev->priv;
+	bool link = netdev->phydev->link;
+	int err;
+
+	netdev_info(netdev, "link: %i\n", link);
+
+	err = n5010_phy_set_led(port, link);
+	if (err)
+		netdev_info(netdev, "failed to set led: %i\n", err);
+}
+
+static int n5010_phy_update_link(struct net_device *netdev,
+				 struct fixed_phy_status *status)
+{
+	struct n5010_port *port = netdev->phydev->priv;
+	bool sfp_in = port->sfp_in;
+
+	n5010_phy_sfp_status(port);
+	status->link = port->get_link(netdev);
+
+	if (sfp_in != port->sfp_in)
+		netdev_info(netdev, "sfp: %s\n", port->sfp_in ? "in" : "out");
+
+	return 0;
+}
+
+int n5010_phy_module_info(struct net_device *netdev)
+{
+	struct n5010_port *port = netdev->phydev->priv;
+
+	return port->sfp_in ? -ENODATA : -ENODEV;
+}
+EXPORT_SYMBOL(n5010_phy_module_info);
+
+int n5010_phy_attach(struct device *dev, struct net_device *netdev,
+		     bool (*get_link)(struct net_device *), u64 port_num)
+{
+	struct n5010_phy *priv = dev_get_drvdata(dev);
+	struct phy_device *phy;
+	struct n5010_port *port;
+	int ret;
+
+	phy = fixed_phy_register(PHY_POLL, &n5010_phy_status, NULL);
+	if (IS_ERR(phy))
+		return PTR_ERR(phy);
+
+	port = devm_kzalloc(&phy->mdio.dev, sizeof(*port), GFP_KERNEL);
+	if (!port)
+		return -ENOMEM;
+
+	port->num = port_num;
+	port->priv = priv;
+	port->phy = phy;
+	port->get_link = get_link;
+
+	phy->priv = port;
+
+	ret = phy_connect_direct(netdev, phy, &n5010_phy_adjust_link,
+				 PHY_INTERFACE_MODE_NA);
+	if (ret)
+		goto err_deregister;
+
+	fixed_phy_set_link_update(phy, n5010_phy_update_link);
+	fixed_phy_change_carrier(netdev, false);
+	n5010_phy_sfp_status(port);
+
+	netdev_info(netdev, "sfp: %s\n", port->sfp_in ? "in" : "out");
+
+	return 0;
+
+err_deregister:
+	fixed_phy_unregister(phy);
+
+	return ret;
+}
+EXPORT_SYMBOL(n5010_phy_attach);
+
+int n5010_phy_detach(struct net_device *netdev)
+{
+	struct phy_device *phy = netdev->phydev;
+
+	phy_detach(phy);
+	fixed_phy_unregister(phy);
+	phy_device_free(phy);
+
+	return 0;
+}
+EXPORT_SYMBOL(n5010_phy_detach);
+
+static int n5010_phy_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct n5010_phy *priv;
+
+	priv = devm_kzalloc(dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv)
+		return -ENOMEM;
+
+	dev_set_drvdata(dev, priv);
+	priv->m10bmc = dev_get_drvdata(dev->parent);
+
+	return 0;
+}
+
+static const struct platform_device_id n5010_phy_ids[] = {
+	{
+		.name = "n5010bmc-phy",
+	},
+	{ }
+};
+
+static struct platform_driver n5010_phy_driver = {
+	.probe = n5010_phy_probe,
+	.driver = {
+		.name = "n5010bmc-phy",
+	},
+	.id_table = n5010_phy_ids,
+};
+module_platform_driver(n5010_phy_driver);
+
+MODULE_DEVICE_TABLE(platform, n5010_phy_ids);
+MODULE_AUTHOR("Intel Corporation");
+MODULE_DESCRIPTION("Intel MAX10 BMC phy driver for n5010");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/net/ethernet/silicom/n5010-phy.h b/drivers/net/ethernet/silicom/n5010-phy.h
new file mode 100644
index 000000000000..9d466f88fb1a
--- /dev/null
+++ b/drivers/net/ethernet/silicom/n5010-phy.h
@@ -0,0 +1,16 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Header File for DFL driver and device API
+ *
+ * Copyright (C) 2020 Silicom Denmark A/S. All rights reserved.
+ */
+
+#ifndef __SILICOM_N5010_PHY_H
+#define __SILICOM_N5010_PHY_H
+
+int n5010_phy_module_info(struct net_device *netdev);
+int n5010_phy_attach(struct device *dev, struct net_device *netdev,
+		     bool (*update)(struct net_device *netdev), u64 port_num);
+int n5010_phy_detach(struct net_device *netdev);
+
+#endif
