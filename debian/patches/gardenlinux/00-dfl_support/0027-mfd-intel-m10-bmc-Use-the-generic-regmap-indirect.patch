From f84ce2e496681016cfcaf808cd2cb8d9a6980729 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ilpo=20J=C3=A4rvinen?= <ilpo.jarvinen@linux.intel.com>
Date: Wed, 4 Jan 2023 17:08:26 +0200
Subject: [PATCH] mfd: intel-m10-bmc: Use the generic regmap indirect
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

M10BMC PMCI driver provided in-driver regmap indirect, convert it to
use the generic version and remove the in-driver one.

Signed-off-by: Ilpo JÃ¤rvinen <ilpo.jarvinen@linux.intel.com>
---
 drivers/mfd/Kconfig              |   1 +
 drivers/mfd/intel-m10-bmc-pmci.c | 112 ++-----------------------------
 2 files changed, 5 insertions(+), 108 deletions(-)

diff --git a/drivers/mfd/Kconfig b/drivers/mfd/Kconfig
index 8e4485fc4031..5b41bf4a7bdd 100644
--- a/drivers/mfd/Kconfig
+++ b/drivers/mfd/Kconfig
@@ -2244,6 +2244,7 @@ config MFD_INTEL_M10_BMC_PMCI
 	depends on FPGA_DFL
 	select MFD_INTEL_M10_BMC_CORE
 	select REGMAP
+	select REGMAP_INDIRECT_REGISTER
 	help
 	  Support for the Intel MAX 10 board management controller via PMCI.
 
diff --git a/drivers/mfd/intel-m10-bmc-pmci.c b/drivers/mfd/intel-m10-bmc-pmci.c
index 12b7ff5287a0..2cba25e4b553 100644
--- a/drivers/mfd/intel-m10-bmc-pmci.c
+++ b/drivers/mfd/intel-m10-bmc-pmci.c
@@ -22,102 +22,6 @@ struct m10bmc_pmci_device {
 	bool flash_busy;
 };
 
-/*
- * Intel FGPA indirect register access via hardware controller/bridge.
- */
-#define INDIRECT_CMD_OFF	0
-#define INDIRECT_CMD_CLR	0
-#define INDIRECT_CMD_RD		BIT(0)
-#define INDIRECT_CMD_WR		BIT(1)
-#define INDIRECT_CMD_ACK	BIT(2)
-
-#define INDIRECT_ADDR_OFF	0x4
-#define INDIRECT_RD_OFF		0x8
-#define INDIRECT_WR_OFF		0xc
-
-#define INDIRECT_INT_US		1
-#define INDIRECT_TIMEOUT_US	10000
-
-struct indirect_ctx {
-	void __iomem *base;
-	struct device *dev;
-};
-
-static int indirect_clear_cmd(struct indirect_ctx *ctx)
-{
-	unsigned int cmd;
-	int ret;
-
-	writel(INDIRECT_CMD_CLR, ctx->base + INDIRECT_CMD_OFF);
-
-	ret = readl_poll_timeout(ctx->base + INDIRECT_CMD_OFF, cmd,
-				 cmd == INDIRECT_CMD_CLR,
-				 INDIRECT_INT_US, INDIRECT_TIMEOUT_US);
-	if (ret)
-		dev_err(ctx->dev, "timed out waiting clear cmd (residual cmd=0x%x)\n", cmd);
-
-	return ret;
-}
-
-static int indirect_reg_read(void *context, unsigned int reg, unsigned int *val)
-{
-	struct indirect_ctx *ctx = context;
-	unsigned int cmd, ack, tmpval;
-	int ret, ret2;
-
-	cmd = readl(ctx->base + INDIRECT_CMD_OFF);
-	if (cmd != INDIRECT_CMD_CLR)
-		dev_warn(ctx->dev, "residual cmd 0x%x on read entry\n", cmd);
-
-	writel(reg, ctx->base + INDIRECT_ADDR_OFF);
-	writel(INDIRECT_CMD_RD, ctx->base + INDIRECT_CMD_OFF);
-
-	ret = readl_poll_timeout(ctx->base + INDIRECT_CMD_OFF, ack,
-				 (ack & INDIRECT_CMD_ACK) == INDIRECT_CMD_ACK,
-				 INDIRECT_INT_US, INDIRECT_TIMEOUT_US);
-	if (ret)
-		dev_err(ctx->dev, "read timed out on reg 0x%x ack 0x%x\n", reg, ack);
-	else
-		tmpval = readl(ctx->base + INDIRECT_RD_OFF);
-
-	ret2 = indirect_clear_cmd(ctx);
-
-	if (ret)
-		return ret;
-	if (ret2)
-		return ret2;
-
-	*val = tmpval;
-	return 0;
-}
-
-static int indirect_reg_write(void *context, unsigned int reg, unsigned int val)
-{
-	struct indirect_ctx *ctx = context;
-	unsigned int cmd, ack;
-	int ret, ret2;
-
-	cmd = readl(ctx->base + INDIRECT_CMD_OFF);
-	if (cmd != INDIRECT_CMD_CLR)
-		dev_warn(ctx->dev, "residual cmd 0x%x on write entry\n", cmd);
-
-	writel(val, ctx->base + INDIRECT_WR_OFF);
-	writel(reg, ctx->base + INDIRECT_ADDR_OFF);
-	writel(INDIRECT_CMD_WR, ctx->base + INDIRECT_CMD_OFF);
-
-	ret = readl_poll_timeout(ctx->base + INDIRECT_CMD_OFF, ack,
-				 (ack & INDIRECT_CMD_ACK) == INDIRECT_CMD_ACK,
-				 INDIRECT_INT_US, INDIRECT_TIMEOUT_US);
-	if (ret)
-		dev_err(ctx->dev, "write timed out on reg 0x%x ack 0x%x\n", reg, ack);
-
-	ret2 = indirect_clear_cmd(ctx);
-
-	if (ret)
-		return ret;
-	return ret2;
-}
-
 static void pmci_write_fifo(void __iomem *base, const u32 *buf, size_t count)
 {
 	while (count--)
@@ -342,8 +246,6 @@ static struct regmap_config m10bmc_pmci_regmap_config = {
 	.val_bits = 32,
 	.wr_table = &m10bmc_pmci_access_table,
 	.rd_table = &m10bmc_pmci_access_table,
-	.reg_read = &indirect_reg_read,
-	.reg_write = &indirect_reg_write,
 	.max_register = M10BMC_N6000_SYS_END,
 };
 
@@ -387,7 +289,6 @@ static int m10bmc_pmci_probe(struct dfl_device *ddev)
 {
 	struct device *dev = &ddev->dev;
 	struct m10bmc_pmci_device *pmci;
-	struct indirect_ctx *ctx;
 	int ret;
 
 	pmci = devm_kzalloc(dev, sizeof(*pmci), GFP_KERNEL);
@@ -401,17 +302,12 @@ static int m10bmc_pmci_probe(struct dfl_device *ddev)
 	if (IS_ERR(pmci->base))
 		return PTR_ERR(pmci->base);
 
-	ctx = devm_kzalloc(dev, sizeof(*ctx), GFP_KERNEL);
-	if (!ctx)
-		return -ENOMEM;
-
 	mutex_init(&pmci->flash_mutex);
 
-	ctx->base = pmci->base + M10BMC_N6000_INDIRECT_BASE;
-	ctx->dev = dev;
-	indirect_clear_cmd(ctx);
-	pmci->m10bmc.regmap = devm_regmap_init(dev, NULL, ctx, &m10bmc_pmci_regmap_config);
-
+	pmci->m10bmc.regmap =
+		devm_regmap_init_indirect_register(dev,
+                                                   pmci->base + M10BMC_N6000_INDIRECT_BASE,
+                                                   &m10bmc_pmci_regmap_config);
 	if (IS_ERR(pmci->m10bmc.regmap)) {
 		ret = PTR_ERR(pmci->m10bmc.regmap);
 		goto destroy_mutex;
