From 82bbd93cf0b5dcf5f5d46e535d18a8abee497498 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ilpo=20J=C3=A4rvinen?= <ilpo.jarvinen@linux.intel.com>
Date: Tue, 10 Jan 2023 10:35:33 +0200
Subject: [PATCH] mfd: intel-m10-bmc: Create BMC log sub-driver
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The PMCI MAX10 BMC contains high and low timestamp registers that are
periodically written by the host driver to facilitate BMC error logs.
Add a kernel worker thread to update the BMC timestamp registers. The
frequency of timestamp updates is controlled through sysfs file (the
default frequency is once per minute).

Use the nvmem API to expose the event MAX10 BMC event logs to
userspace.

Co-developed-by: Russ Weight <russell.h.weight@intel.com>
Signed-off-by: Russ Weight <russell.h.weight@intel.com>
Co-developed-by: Tianfei Zhang <tianfei.zhang@intel.com>
Signed-off-by: Tianfei Zhang <tianfei.zhang@intel.com>
Co-developed-by: Matthew Gerlach <matthew.gerlach@linux.intel.com>
Signed-off-by: Matthew Gerlach <matthew.gerlach@linux.intel.com>
Signed-off-by: Ilpo JÃ¤rvinen <ilpo.jarvinen@linux.intel.com>
---
 .../testing/sysfs-driver-intel-m10-bmc-log    |  36 +++
 drivers/mfd/Kconfig                           |   9 +
 drivers/mfd/Makefile                          |   1 +
 drivers/mfd/intel-m10-bmc-log.c               | 262 ++++++++++++++++++
 drivers/mfd/intel-m10-bmc-pmci.c              |   1 +
 include/linux/mfd/intel-m10-bmc.h             |  14 +
 6 files changed, 323 insertions(+)
 create mode 100644 Documentation/ABI/testing/sysfs-driver-intel-m10-bmc-log
 create mode 100644 drivers/mfd/intel-m10-bmc-log.c

diff --git a/Documentation/ABI/testing/sysfs-driver-intel-m10-bmc-log b/Documentation/ABI/testing/sysfs-driver-intel-m10-bmc-log
new file mode 100644
index 000000000000..3098f0d3f56e
--- /dev/null
+++ b/Documentation/ABI/testing/sysfs-driver-intel-m10-bmc-log
@@ -0,0 +1,36 @@
+What: /sys/bus/platform/devices/intel-m10-bmc-log.*.auto/time_sync_frequency
+Date:		Jan 2023
+KernelVersion:	6.3
+Contact:	Russ Weight <russell.h.weight@intel.com>
+Description:	Read/write. This sysfs node controls the frequency (in
+		seconds) that the host writes to the MAX10 BMC registers
+		to synchronize the timestamp registers used for the BMC
+		error log. Write zero to stop the timestamp synchronization.
+		Write a non-zero integer value to restart or modify the
+		update frequency. Reading from this file will return the
+		same integer value.
+		Format: %u
+
+What:		/sys/bus/platform/devices/intel-m10-bmc-log.*.auto/bmc_event_log*/nvmem
+Date:		Jan 2023
+KernelVersion:	6.3
+Contact:	Tianfei zhang <tianfei.zhang@intel.com>
+Description:	Read-only. This file returns the contents of the "error log"
+		partition in flash. This partition includes the error info for
+		the BMC.
+
+What:		/sys/bus/platform/devices/intel-m10-bmc-log.*.auto/fpga_image_directory*/nvmem
+Date:		Jan 2023
+KernelVersion:	6.3
+Contact:	Tianfei zhang <tianfei.zhang@intel.com>
+Description:	Read-only. This file returns the contents of the "FPGA image
+		directory" partition in flash. This partition includes
+		information like the FPGA Image versions and state.
+
+What:		/sys/bus/platform/devices/intel-m10-bmc-log.*.auto/bom_info*/nvmem
+Date:		Jan 2023
+KernelVersion:	6.3
+Contact:	Tianfei zhang <tianfei.zhang@intel.com>
+Description:	Read-only. This file returns the contents of the "BOM info"
+		partition in flash. This partition includes information such
+		as the BOM critical components, PBA#, MMID.
diff --git a/drivers/mfd/Kconfig b/drivers/mfd/Kconfig
index a42482ed8196..8e4485fc4031 100644
--- a/drivers/mfd/Kconfig
+++ b/drivers/mfd/Kconfig
@@ -2251,6 +2251,15 @@ config MFD_INTEL_M10_BMC_PMCI
 	  additional drivers must be enabled in order to use the functionality
 	  of the device.
 
+config MFD_INTEL_M10_BMC_LOG
+	tristate "Intel MAX 10 Board Management Controller Log Driver"
+	depends on MFD_INTEL_M10_BMC_CORE
+	help
+	  Support for the Intel MAX 10 board management controller log
+
+	  This driver provides timestamp synchronization with the MAX10
+	  BMC log.
+
 config MFD_RSMU_I2C
 	tristate "Renesas Synchronization Management Unit with I2C"
 	depends on I2C && OF
diff --git a/drivers/mfd/Makefile b/drivers/mfd/Makefile
index c90fb96cad2a..18debc578e83 100644
--- a/drivers/mfd/Makefile
+++ b/drivers/mfd/Makefile
@@ -273,6 +273,7 @@ obj-$(CONFIG_SGI_MFD_IOC3)	+= ioc3.o
 obj-$(CONFIG_MFD_SIMPLE_MFD_I2C)	+= simple-mfd-i2c.o
 
 obj-$(CONFIG_MFD_INTEL_M10_BMC_CORE)	+= intel-m10-bmc-core.o
+obj-$(CONFIG_MFD_INTEL_M10_BMC_LOG)	+= intel-m10-bmc-log.o
 obj-$(CONFIG_MFD_INTEL_M10_BMC_SPI)	+= intel-m10-bmc-spi.o
 obj-$(CONFIG_MFD_INTEL_M10_BMC_PMCI)	+= intel-m10-bmc-pmci.o
 
diff --git a/drivers/mfd/intel-m10-bmc-log.c b/drivers/mfd/intel-m10-bmc-log.c
new file mode 100644
index 000000000000..d5e64506c92f
--- /dev/null
+++ b/drivers/mfd/intel-m10-bmc-log.c
@@ -0,0 +1,262 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Intel Max10 Board Management Controller Log Driver
+ *
+ * Copyright (C) 2021-2023 Intel Corporation.
+ */
+
+#include <linux/bitfield.h>
+#include <linux/dev_printk.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/nvmem-provider.h>
+#include <linux/mod_devicetable.h>
+#include <linux/types.h>
+
+#include <linux/mfd/intel-m10-bmc.h>
+
+#define M10BMC_TIMESTAMP_FREQ			60	/* 60 secs between updates */
+
+struct m10bmc_log_cfg {
+	int el_size;
+	unsigned long el_off;
+
+	int id_size;
+	unsigned long id_off;
+
+	int bi_size;
+	unsigned long bi_off;
+};
+
+struct m10bmc_log {
+	struct device *dev;
+	struct intel_m10bmc *m10bmc;
+	unsigned int freq_s;		/* update frequency in seconds */
+	struct delayed_work dwork;
+	const struct m10bmc_log_cfg *log_cfg;
+	struct nvmem_device *bmc_event_log_nvmem;
+	struct nvmem_device *fpga_image_dir_nvmem;
+	struct nvmem_device *bom_info_nvmem;
+};
+
+static void m10bmc_log_time_sync(struct work_struct *work)
+{
+	struct delayed_work *dwork = to_delayed_work(work);
+	const struct m10bmc_csr_map *csr_map;
+	struct m10bmc_log *log;
+	s64 time_ms;
+	int ret;
+
+	log = container_of(dwork, struct m10bmc_log, dwork);
+	csr_map = log->m10bmc->info->csr_map;
+
+	time_ms = ktime_to_ms(ktime_get_real());
+	ret = regmap_write(log->m10bmc->regmap, csr_map->base + M10BMC_N6000_TIME_HIGH,
+			   upper_32_bits(time_ms));
+	if (!ret) {
+		ret = regmap_write(log->m10bmc->regmap, csr_map->base + M10BMC_N6000_TIME_LOW,
+				   lower_32_bits(time_ms));
+	}
+	if (ret)
+		dev_err_once(log->dev, "Failed to update BMC timestamp: %d\n", ret);
+
+	schedule_delayed_work(&log->dwork, log->freq_s * HZ);
+}
+
+static ssize_t time_sync_frequency_store(struct device *dev, struct device_attribute *attr,
+					 const char *buf, size_t count)
+{
+	struct m10bmc_log *ddata = dev_get_drvdata(dev);
+	unsigned int old_freq = ddata->freq_s;
+	int ret;
+
+	ret = kstrtouint(buf, 0, &ddata->freq_s);
+	if (ret)
+		return ret;
+
+	if (old_freq)
+		cancel_delayed_work_sync(&ddata->dwork);
+
+	if (ddata->freq_s)
+		m10bmc_log_time_sync(&ddata->dwork.work);
+
+	return count;
+}
+
+static ssize_t time_sync_frequency_show(struct device *dev, struct device_attribute *attr,
+					char *buf)
+{
+	struct m10bmc_log *ddata = dev_get_drvdata(dev);
+
+	return sysfs_emit(buf, "%u\n", ddata->freq_s);
+}
+static DEVICE_ATTR_RW(time_sync_frequency);
+
+static struct attribute *m10bmc_log_attrs[] = {
+	&dev_attr_time_sync_frequency.attr,
+	NULL,
+};
+ATTRIBUTE_GROUPS(m10bmc_log);
+
+static int bmc_nvmem_read(struct m10bmc_log *ddata, unsigned int addr,
+			  unsigned int off, void *val, size_t count)
+{
+	struct intel_m10bmc *m10bmc = ddata->m10bmc;
+	int ret;
+
+	if (!m10bmc->flash_bulk_ops)
+		return -ENODEV;
+
+	ret = m10bmc->flash_bulk_ops->read(m10bmc, val, addr + off, count);
+	if (ret) {
+		dev_err(ddata->dev, "failed to read flash %x (%d)\n", addr, ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int bmc_event_log_nvmem_read(void *priv, unsigned int off, void *val, size_t count)
+{
+	struct m10bmc_log *ddata = priv;
+
+	return bmc_nvmem_read(ddata, ddata->log_cfg->el_off, off, val, count);
+}
+
+static int fpga_image_dir_nvmem_read(void *priv, unsigned int off, void *val, size_t count)
+{
+	struct m10bmc_log *ddata = priv;
+
+	return bmc_nvmem_read(ddata, ddata->log_cfg->id_off, off, val, count);
+}
+
+static int bom_info_nvmem_read(void *priv, unsigned int off, void *val, size_t count)
+{
+	struct m10bmc_log *ddata = priv;
+
+	return bmc_nvmem_read(ddata, ddata->log_cfg->bi_off, off, val, count);
+}
+
+static struct nvmem_config bmc_event_log_nvmem_config = {
+	.name = "bmc_event_log",
+	.stride = 4,
+	.word_size = 1,
+	.reg_read = bmc_event_log_nvmem_read,
+	.id = NVMEM_DEVID_AUTO,
+};
+
+static struct nvmem_config fpga_image_dir_nvmem_config = {
+	.name = "fpga_image_directory",
+	.stride = 4,
+	.word_size = 1,
+	.reg_read = fpga_image_dir_nvmem_read,
+	.id = NVMEM_DEVID_AUTO,
+};
+
+static struct nvmem_config bom_info_nvmem_config = {
+	.name = "bom_info",
+	.stride = 4,
+	.word_size = 1,
+	.reg_read = bom_info_nvmem_read,
+	.id = NVMEM_DEVID_AUTO,
+};
+
+static int m10bmc_log_probe(struct platform_device *pdev)
+{
+	const struct platform_device_id *id = platform_get_device_id(pdev);
+	struct m10bmc_log *ddata;
+	struct nvmem_config nvconfig;
+
+	ddata = devm_kzalloc(&pdev->dev, sizeof(*ddata), GFP_KERNEL);
+	if (!ddata)
+		return -ENOMEM;
+
+	ddata->dev = &pdev->dev;
+	ddata->m10bmc = dev_get_drvdata(pdev->dev.parent);
+	ddata->freq_s = M10BMC_TIMESTAMP_FREQ;
+	INIT_DELAYED_WORK(&ddata->dwork, m10bmc_log_time_sync);
+	ddata->log_cfg = (struct m10bmc_log_cfg *)id->driver_data;
+	dev_set_drvdata(&pdev->dev, ddata);
+
+	if (ddata->log_cfg->el_size > 0) {
+		m10bmc_log_time_sync(&ddata->dwork.work);
+
+		memcpy(&nvconfig, &bmc_event_log_nvmem_config, sizeof(bmc_event_log_nvmem_config));
+		nvconfig.dev = ddata->dev;
+		nvconfig.priv = ddata;
+		nvconfig.size = ddata->log_cfg->el_size;
+
+		ddata->bmc_event_log_nvmem = devm_nvmem_register(ddata->dev, &nvconfig);
+		if (IS_ERR(ddata->bmc_event_log_nvmem))
+			return PTR_ERR(ddata->bmc_event_log_nvmem);
+	}
+
+	if (ddata->log_cfg->id_size > 0) {
+		memcpy(&nvconfig, &fpga_image_dir_nvmem_config, sizeof(fpga_image_dir_nvmem_config));
+		nvconfig.dev = ddata->dev;
+		nvconfig.priv = ddata;
+		nvconfig.size = ddata->log_cfg->id_size;
+
+		ddata->fpga_image_dir_nvmem = devm_nvmem_register(ddata->dev, &nvconfig);
+		if (IS_ERR(ddata->fpga_image_dir_nvmem))
+			return PTR_ERR(ddata->fpga_image_dir_nvmem);
+	}
+
+	if (ddata->log_cfg->bi_size > 0) {
+		memcpy(&nvconfig, &bom_info_nvmem_config, sizeof(bom_info_nvmem_config));
+		nvconfig.dev = ddata->dev;
+		nvconfig.priv = ddata;
+		nvconfig.size = ddata->log_cfg->bi_size;
+
+		ddata->bom_info_nvmem = devm_nvmem_register(ddata->dev, &nvconfig);
+		if (IS_ERR(ddata->bom_info_nvmem))
+			return PTR_ERR(ddata->bom_info_nvmem);
+	}
+
+	return 0;
+}
+
+static int m10bmc_log_remove(struct platform_device *pdev)
+{
+	struct m10bmc_log *ddata = dev_get_drvdata(&pdev->dev);
+
+	cancel_delayed_work_sync(&ddata->dwork);
+
+	return 0;
+}
+
+static const struct m10bmc_log_cfg m10bmc_log_n6000_cfg = {
+	.el_size = M10BMC_N6000_ERROR_LOG_SIZE,
+	.el_off = M10BMC_N6000_ERROR_LOG_ADDR,
+
+	.id_size = M10BMC_N6000_FPGA_IMAGE_DIR_SIZE,
+	.id_off = M10BMC_N6000_FPGA_IMAGE_DIR_ADDR,
+
+	.bi_size = M10BMC_N6000_BOM_INFO_SIZE,
+	.bi_off = M10BMC_N6000_BOM_INFO_ADDR,
+};
+
+static const struct platform_device_id intel_m10bmc_log_ids[] = {
+	{
+		.name = "n6000bmc-log",
+		.driver_data = (unsigned long)&m10bmc_log_n6000_cfg,
+	},
+	{ }
+};
+
+static struct platform_driver intel_m10bmc_log_driver = {
+	.probe = m10bmc_log_probe,
+	.remove = m10bmc_log_remove,
+	.driver = {
+		.name = "intel-m10-bmc-log",
+		.dev_groups = m10bmc_log_groups,
+	},
+	.id_table = intel_m10bmc_log_ids,
+};
+module_platform_driver(intel_m10bmc_log_driver);
+
+MODULE_DEVICE_TABLE(platform, intel_m10bmc_log_ids);
+MODULE_AUTHOR("Intel Corporation");
+MODULE_DESCRIPTION("Intel MAX10 BMC Log");
+MODULE_LICENSE("GPL");
diff --git a/drivers/mfd/intel-m10-bmc-pmci.c b/drivers/mfd/intel-m10-bmc-pmci.c
index 8821f1876dd6..f8803b7bb98e 100644
--- a/drivers/mfd/intel-m10-bmc-pmci.c
+++ b/drivers/mfd/intel-m10-bmc-pmci.c
@@ -350,6 +350,7 @@ static struct regmap_config m10bmc_pmci_regmap_config = {
 static struct mfd_cell m10bmc_pmci_n6000_bmc_subdevs[] = {
 	{ .name = "n6000bmc-hwmon" },
 	{ .name = "n6000bmc-sec-update" },
+	{ .name = "n6000bmc-log" },
 };
 
 static const struct m10bmc_csr_map m10bmc_n6000_csr_map = {
diff --git a/include/linux/mfd/intel-m10-bmc.h b/include/linux/mfd/intel-m10-bmc.h
index 1812ebfa11a8..1c6d73518d54 100644
--- a/include/linux/mfd/intel-m10-bmc.h
+++ b/include/linux/mfd/intel-m10-bmc.h
@@ -125,6 +125,10 @@
 #define M10BMC_N6000_SYS_BASE			0x0
 #define M10BMC_N6000_SYS_END			0xfff
 
+/* N6000 Timestamp registers */
+#define M10BMC_N6000_TIME_LOW			0x178
+#define M10BMC_N6000_TIME_HIGH			0x17c
+
 #define M10BMC_N6000_DOORBELL			0x1c0
 #define M10BMC_N6000_AUTH_RESULT		0x1c4
 #define AUTH_RESULT_RSU_STATUS			GENMASK(23, 16)
@@ -134,6 +138,16 @@
 #define M10BMC_N6000_MAC_LOW			0x20
 #define M10BMC_N6000_MAC_HIGH			(M10BMC_N6000_MAC_LOW + 4)
 
+/* Addresses for BMC log data in FLASH */
+#define M10BMC_N6000_ERROR_LOG_ADDR		0x7fb0000
+#define M10BMC_N6000_ERROR_LOG_SIZE		0x40000
+
+#define M10BMC_N6000_FPGA_IMAGE_DIR_ADDR	0x7ff6000
+#define M10BMC_N6000_FPGA_IMAGE_DIR_SIZE	0x3000
+
+#define M10BMC_N6000_BOM_INFO_ADDR		0x7ff0000
+#define M10BMC_N6000_BOM_INFO_SIZE		0x2000
+
 /* Addresses for security related data in FLASH */
 #define M10BMC_N6000_BMC_REH_ADDR		0x7ffc004
 #define M10BMC_N6000_BMC_PROG_ADDR		0x7ffc000
