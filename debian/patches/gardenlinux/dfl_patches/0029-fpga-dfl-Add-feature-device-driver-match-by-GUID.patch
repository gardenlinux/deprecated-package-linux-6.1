From ea545a2895029e8c7aa1e8ecb8bf7125109a1f3b Mon Sep 17 00:00:00 2001
From: Basheer Ahmed Muddebihal <basheer.ahmed.muddebihal@linux.intel.com>
Date: Mon, 28 Nov 2022 15:03:35 -0800
Subject: [PATCH] fpga: dfl: Add feature device driver match by GUID
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This patch adds the DFL enumeration and binding of the driver 
using GUID match for DFHv1 FPGA IPs. 

- Changed the GUID match logic to first bind GUID
	if GUID is valid for DFHv1 headers
- Added the method to check for invalid ID's such as
	NULL and all F in GUID
- Added the read-only sysfs attribute "guid" of DFHv1 FPGA IP
- Added uevent string to support GUID match

Signed-off-by: Basheer Ahmed Muddebihal <basheer.ahmed.muddebihal@linux.intel.com>
---
 drivers/fpga/dfl.c  | 67 ++++++++++++++++++++++++++++++++++++++++-----
 drivers/fpga/dfl.h  | 33 ++++++++++++++++++++++
 include/linux/dfl.h |  2 ++
 3 files changed, 95 insertions(+), 7 deletions(-)

diff --git a/drivers/fpga/dfl.c b/drivers/fpga/dfl.c
index 0a4227bc9462..183eac60838a 100644
--- a/drivers/fpga/dfl.c
+++ b/drivers/fpga/dfl.c
@@ -251,7 +251,8 @@ static DEFINE_IDA(dfl_device_ida);
 static const struct dfl_device_id *
 dfl_match_one_device(const struct dfl_device_id *id, struct dfl_device *ddev)
 {
-	if (id->type == ddev->type && id->feature_id == ddev->feature_id)
+	if ((dfl_guid_is_valid(&ddev->guid) && guid_equal(&id->guid, &ddev->guid)) ||
+	    (id->type == ddev->type && id->feature_id == ddev->feature_id))
 		return id;
 
 	return NULL;
@@ -265,7 +266,7 @@ static int dfl_bus_match(struct device *dev, struct device_driver *drv)
 
 	id_entry = ddrv->id_table;
 	if (id_entry) {
-		while (id_entry->feature_id) {
+		while (id_entry->feature_id || dfl_guid_is_valid(&id_entry->guid)) {
 			if (dfl_match_one_device(id_entry, ddev)) {
 				ddev->id_entry = id_entry;
 				return 1;
@@ -294,12 +295,19 @@ static void dfl_bus_remove(struct device *dev)
 		ddrv->remove(ddev);
 }
 
+#define DFL_ALIAS_BUF_LEN 64
+
 static int dfl_bus_uevent(struct device *dev, struct kobj_uevent_env *env)
 {
 	struct dfl_device *ddev = to_dfl_dev(dev);
+	char alias[DFL_ALIAS_BUF_LEN];
+
+	scnprintf(alias, DFL_ALIAS_BUF_LEN, "dfl:t%04Xf%04X", ddev->type, ddev->feature_id);
 
-	return add_uevent_var(env, "MODALIAS=dfl:t%04Xf%04X",
-			      ddev->type, ddev->feature_id);
+	if (!guid_is_null(&ddev->guid))
+		scnprintf(alias + strlen(alias), DFL_ALIAS_BUF_LEN, "g{%pUL}", &ddev->guid);
+
+	return add_uevent_var(env, "MODALIAS=%s", alias);
 }
 
 static ssize_t
@@ -320,9 +328,22 @@ feature_id_show(struct device *dev, struct device_attribute *attr, char *buf)
 }
 static DEVICE_ATTR_RO(feature_id);
 
+static ssize_t
+guid_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct dfl_device *ddev = to_dfl_dev(dev);
+
+	if (!ddev->dfh_version)
+		return -ENOENT;
+
+	return sysfs_emit(buf, "%pUL\n", &ddev->guid);
+}
+static DEVICE_ATTR_RO(guid);
+
 static struct attribute *dfl_dev_attrs[] = {
 	&dev_attr_type.attr,
 	&dev_attr_feature_id.attr,
+	&dev_attr_guid.attr,
 	NULL,
 };
 ATTRIBUTE_GROUPS(dfl_dev);
@@ -394,6 +415,9 @@ dfl_dev_add(struct dfl_feature_platform_data *pdata,
 		ddev->param_size = feature->param_size;
 	}
 
+	if (ddev->dfh_version == 1)
+		guid_copy(&ddev->guid, &feature->guid);
+
 	/* add mmio resource */
 	parent_res = &pdev->resource[feature->resource_index];
 	ddev->mmio_res.flags = IORESOURCE_MEM;
@@ -557,8 +581,10 @@ static bool dfl_feature_drv_match(struct dfl_feature *feature,
 	const struct dfl_feature_id *ids = driver->id_table;
 
 	if (ids) {
-		while (ids->id) {
-			if (ids->id == feature->id)
+		while (ids->id || dfl_guid_is_valid(&ids->guid)) {
+			if ((dfl_guid_is_valid(&feature->guid) &&
+			     guid_equal(&ids->guid, &feature->guid)) ||
+					ids->id == feature->id)
 				return true;
 			ids++;
 		}
@@ -721,7 +747,8 @@ struct build_feature_devs_info {
  *
  * @fid: id of this sub feature.
  * @revision: revision of this sub feature
- * @dfh_version: version of Device Feature Header (DFH)
+ * @dfh_version: device feature header version.
+ * @guid: guid of this sub feature.
  * @mmio_res: mmio resource of this sub feature.
  * @ioaddr: mapped base address of mmio resource.
  * @node: node in sub_features linked list.
@@ -734,6 +761,7 @@ struct dfl_feature_info {
 	u16 fid;
 	u8 revision;
 	u8 dfh_version;
+	guid_t guid;
 	struct resource mmio_res;
 	void __iomem *ioaddr;
 	struct list_head node;
@@ -827,6 +855,8 @@ static int build_info_commit_dev(struct build_feature_devs_info *binfo)
 
 			feature->param_size = finfo->param_size;
 		}
+		if (feature->dfh_version == 1)
+			guid_copy(&feature->guid, &finfo->guid);
 		/*
 		 * the FIU header feature has some fundamental functions (sriov
 		 * set, port enable/disable) needed for the dfl bus device and
@@ -1139,6 +1169,7 @@ create_feature_instance(struct build_feature_devs_info *binfo,
 	struct dfl_feature_info *finfo;
 	resource_size_t start, end;
 	int dfh_psize = 0;
+	u64 guid_l, guid_h;
 	u8 revision = 0;
 	u64 v, addr_off;
 	u8 dfh_ver = 0;
@@ -1148,6 +1179,7 @@ create_feature_instance(struct build_feature_devs_info *binfo,
 		v = readq(binfo->ioaddr + ofst);
 		revision = FIELD_GET(DFH_REVISION, v);
 		dfh_ver = FIELD_GET(DFH_VERSION, v);
+
 		/* read feature size and id if inputs are invalid */
 		size = size ? size : feature_size(v);
 		fid = fid ? fid : feature_id(v);
@@ -1190,6 +1222,27 @@ create_feature_instance(struct build_feature_devs_info *binfo,
 		start = binfo->start + ofst;
 		end = start + size - 1;
 	}
+
+	if (finfo->dfh_version == 1) {
+		guid_l = readq(binfo->ioaddr + ofst + GUID_L);
+		guid_h = readq(binfo->ioaddr + ofst + GUID_H);
+
+		if (guid_l || guid_h) {
+			dev_dbg(binfo->dev, "dfl: GUID_H = 0x%llx , GUID_L = 0x%llx\n",
+				guid_h, guid_l);
+			finfo->guid = GUID_INIT(FIELD_GET(DFL_GUID_H_A, guid_h),
+						FIELD_GET(DFL_GUID_H_B, guid_h),
+					FIELD_GET(DFL_GUID_H_C, guid_h),
+					FIELD_GET(DFL_GUID_L_D0, guid_l),
+					FIELD_GET(DFL_GUID_L_D1, guid_l),
+					FIELD_GET(DFL_GUID_L_D2, guid_l),
+					FIELD_GET(DFL_GUID_L_D3, guid_l),
+					FIELD_GET(DFL_GUID_L_D4, guid_l),
+					FIELD_GET(DFL_GUID_L_D5, guid_l),
+					FIELD_GET(DFL_GUID_L_D6, guid_l),
+					FIELD_GET(DFL_GUID_L_D7, guid_l));
+		}
+	}
 	finfo->mmio_res.flags = IORESOURCE_MEM;
 	finfo->mmio_res.start = start;
 	finfo->mmio_res.end = end;
diff --git a/drivers/fpga/dfl.h b/drivers/fpga/dfl.h
index 20eaddce6988..236422d03328 100644
--- a/drivers/fpga/dfl.h
+++ b/drivers/fpga/dfl.h
@@ -233,9 +233,11 @@ int dfl_fpga_check_port_id(struct platform_device *pdev, void *pport_id);
  * struct dfl_feature_id - dfl private feature id
  *
  * @id: unique dfl private feature id.
+ * @guid: unique dfl private guid.
  */
 struct dfl_feature_id {
 	u16 id;
+	guid_t guid;
 };
 
 /**
@@ -280,6 +282,7 @@ struct dfl_feature_irq_ctx {
  * @dfh_version: version of the DFH
  * @param_size: size of dfh parameters
  * @params: point to memory copy of dfh parameters
+ * @guid: unique dfl private guid.
  */
 struct dfl_feature {
 	struct platform_device *dev;
@@ -295,6 +298,7 @@ struct dfl_feature {
 	u8 dfh_version;
 	unsigned int param_size;
 	void *params;
+	guid_t guid;
 };
 
 #define FEATURE_DEV_ID_UNUSED	(-1)
@@ -469,6 +473,35 @@ static inline u8 dfl_feature_revision(void __iomem *base)
 	return (u8)FIELD_GET(DFH_REVISION, readq(base + DFH));
 }
 
+#define DFL_GUID_INVALID \
+	GUID_INIT(0xffffffff, 0xffff, 0xffff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff)
+
+static inline bool dfl_guid_is_valid(const guid_t *guid)
+{
+	bool ret = true;
+	guid_t *guid_invalid =  &DFL_GUID_INVALID;
+
+	if (guid_is_null(guid) || guid_equal(guid, guid_invalid))
+		ret = false;
+	return ret;
+}
+
+/*
+ *  Bit definitions masks extract from GUID_H and GUID_L
+ *  GUID_INIT(a, b, c, d0, d1, d2, d3, d4, d5, d6, d7)
+ */
+#define DFL_GUID_H_A   GENMASK_ULL(63, 32)
+#define DFL_GUID_H_B   GENMASK_ULL(31, 16)
+#define DFL_GUID_H_C   GENMASK_ULL(15, 0)
+#define DFL_GUID_L_D0  GENMASK_ULL(63, 56)
+#define DFL_GUID_L_D1  GENMASK_ULL(55, 48)
+#define DFL_GUID_L_D2  GENMASK_ULL(47, 40)
+#define DFL_GUID_L_D3  GENMASK_ULL(39, 32)
+#define DFL_GUID_L_D4  GENMASK_ULL(31, 24)
+#define DFL_GUID_L_D5  GENMASK_ULL(23, 16)
+#define DFL_GUID_L_D6  GENMASK_ULL(15, 8)
+#define DFL_GUID_L_D7  GENMASK_ULL(7, 0)
+
 /**
  * struct dfl_fpga_enum_info - DFL FPGA enumeration information
  *
diff --git a/include/linux/dfl.h b/include/linux/dfl.h
index 0a7a00a0ee7f..a62449b70708 100644
--- a/include/linux/dfl.h
+++ b/include/linux/dfl.h
@@ -36,6 +36,7 @@ enum dfl_id_type {
  * @dfh_version: version of DFH for the device
  * @param_size: size of the block parameters in bytes
  * @params: pointer to block of parameters copied memory
+ * @guid: feature GUID of the dfl device.
  */
 struct dfl_device {
 	struct device dev;
@@ -51,6 +52,7 @@ struct dfl_device {
 	u8 dfh_version;
 	unsigned int param_size;
 	void *params;
+	guid_t guid;
 };
 
 /**
