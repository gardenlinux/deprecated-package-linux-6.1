From 9d284c13905b9378d6d3de344d0e48d413581da1 Mon Sep 17 00:00:00 2001
From: Xu Yilun <yilun.xu@intel.com>
Date: Sat, 10 Oct 2020 10:38:27 +0800
Subject: [PATCH] fpga: dfl: add support for switching the retimer FEC mode

The N3000 Nios private feature provides the one-time configuration for
the retime FEC mode. The Nios firmware is responsible for the actual
hardware operation. It gives users a chance (only one chance) to set the
retimers to a different FEC mode.

The Nios firmware has no nvmem to store the required FEC mode info, so it
needs the user input everytime on board power up. So this patch
introduced a module parameter for the user input.

However, the community rejects this module parameter solution. Firstly
the module parameter can not support different configuration for
multiple boards. Secondly the maintainer thinks this configuration
should not be cared by linux user, the bootloader (thus the on board
firmware) should be changed to handle the configuration.

Signed-off-by: Xu Yilun <yilun.xu@intel.com>
---
 .../testing/sysfs-bus-dfl-devices-n3000-nios  |  4 +-
 Documentation/fpga/dfl-n3000-nios.rst         | 73 +++++++++++++++++++
 Documentation/fpga/index.rst                  |  1 +
 drivers/fpga/dfl-n3000-nios.c                 | 18 +++--
 4 files changed, 90 insertions(+), 6 deletions(-)
 create mode 100644 Documentation/fpga/dfl-n3000-nios.rst

diff --git a/Documentation/ABI/testing/sysfs-bus-dfl-devices-n3000-nios b/Documentation/ABI/testing/sysfs-bus-dfl-devices-n3000-nios
index 5335d742bcaf..494eb1808094 100644
--- a/Documentation/ABI/testing/sysfs-bus-dfl-devices-n3000-nios
+++ b/Documentation/ABI/testing/sysfs-bus-dfl-devices-n3000-nios
@@ -7,7 +7,9 @@ Description:	Read-only. Returns the FEC mode of the 25G links of the
 		Solomon FEC, "kr" for Fire Code FEC, "no" for NO FEC.
 		"not supported" if the FEC mode setting is not supported, this
 		happens when the Nios firmware version major < 3, or no link is
-		configured to 25G.
+		configured to 25G. The FEC mode could be set by module
+		parameters, but it could only be set once after the board
+		powers up.
 		Format: string
 
 What:		/sys/bus/dfl/devices/dfl_dev.X/retimer_A_mode
diff --git a/Documentation/fpga/dfl-n3000-nios.rst b/Documentation/fpga/dfl-n3000-nios.rst
new file mode 100644
index 000000000000..66bc09150aba
--- /dev/null
+++ b/Documentation/fpga/dfl-n3000-nios.rst
@@ -0,0 +1,73 @@
+.. SPDX-License-Identifier: GPL-2.0
+
+=================================
+N3000 Nios Private Feature Driver
+=================================
+
+The N3000 Nios driver supports for the Nios handshake private feature on Intel
+PAC (Programmable Acceleration Card) N3000.
+
+The Nios is the embedded processor in the FPGA, it will configure the 2 onboard
+ethernet retimers on power up. This private feature provides a handshake
+interface to FPGA Nios firmware, which receives the ethernet retimer
+configuration command from host and does the configuration via an internal SPI
+master (spi-altera). When Nios finishes the configuration, host takes over the
+ownership of the SPI master to control an Intel MAX10 BMC (Board Management
+Controller) Chip on the SPI bus.
+
+So the driver does 2 major tasks on probe, uses the Nios firmware to configure
+the ethernet retimer, and then creates a spi master platform device with the
+MAX10 device info in spi_board_info.
+
+
+Configuring the ethernet retimer
+================================
+
+The Intel PAC N3000 is a FPGA based SmartNIC platform which could be programmed
+to various configurations (with different link numbers and speeds, e.g. 8x10G,
+4x25G ...). And the retimer chips should also be configured correspondingly by
+Nios firmware. There are 2 retimer chips on the board, each of them supports 4
+links. For example, in 8x10G configuration, the 2 retimer chips are both set to
+4x10G mode, while in 4x25G configuration, retimer A is set to 4x25G and retimer
+B is in reset. For now, the Nios firmware only supports 10G and 25G mode
+setting for the retimer chips.
+
+For all 25G links, their FEC (Forward Error Correction) mode could be further
+configured by Nios firmware for user's requirement. For 10G links, they don't
+have the FEC mode at all, the firmware ignores the FEC mode setting for them.
+The FEC setting is not supported if the firmware version major < 3.
+
+The retimer configuration can only be done once after the board powers up, the
+Nios firmware will not accept second configuration afterward. So it is not
+proper for the driver to create a RW sysfs node for the FEC mode. A better way
+is that the driver accepts a module parameter for the FEC mode, and does the
+retimer configuration on driver probe, it also creates a RO sysfs node for the
+FEC mode query.
+
+Module Parameters
+=================
+
+The N3000 Nios driver supports the following module parameters:
+
+* fec_mode: string
+  Require the Nios firmware to set the FEC mode for all 25G links of the
+  ethernet retimers. The Nios firmware configures all these links with the same
+  FEC mode. The possible values of fec_mode could be:
+
+  - "rs": Reed Solomon FEC (default)
+  - "kr": Fire Code FEC
+  - "no": No FEC
+
+  Since the firmware doesn't accept second configuration, The FEC mode will not
+  be changed if the module is reloaded with a different parameter value.
+
+  The parameter has no effect for 10G links. It has no effect to all the links
+  if firmware version major < 3.
+
+
+Sysfs Attributes
+================
+
+The driver creates some attributes in sysfs for users to query the retimer
+info. Please see Documentation/ABI/testing/sysfs-bus-dfl-devices-n3000-nios for
+more details.
diff --git a/Documentation/fpga/index.rst b/Documentation/fpga/index.rst
index f80f95667ca2..5fd3c379e1c8 100644
--- a/Documentation/fpga/index.rst
+++ b/Documentation/fpga/index.rst
@@ -8,6 +8,7 @@ fpga
     :maxdepth: 1
 
     dfl
+    dfl-n3000-nios
 
 .. only::  subproject and html
 
diff --git a/drivers/fpga/dfl-n3000-nios.c b/drivers/fpga/dfl-n3000-nios.c
index 9ddf1d1d392f..88e45d5e929c 100644
--- a/drivers/fpga/dfl-n3000-nios.c
+++ b/drivers/fpga/dfl-n3000-nios.c
@@ -23,6 +23,10 @@
 #include <linux/spi/spi.h>
 #include <linux/types.h>
 
+static char *fec_mode = "rs";
+module_param(fec_mode, charp, 0444);
+MODULE_PARM_DESC(fec_mode, "FEC mode of the ethernet retimer on Intel PAC N3000");
+
 /*
  * N3000 Nios private feature registers, named as NIOS_SPI_XX on spec.
  * NS is the abbreviation of NIOS_SPI.
@@ -348,13 +352,17 @@ static int n3000_nios_init_done_check(struct n3000_nios *nn)
 		 * mode field cause host could not get the retimer working mode
 		 * until the Nios init is done.
 		 *
-		 * For now the driver doesn't support the retimer FEC mode
-		 * switching per user's request. It is always set to Reed
-		 * Solomon FEC.
-		 *
 		 * The driver will set the same FEC mode for all links.
 		 */
-		val |= N3000_NIOS_INIT_REQ_FEC_MODE_RS_ALL;
+
+		if (!strcmp(fec_mode, "no"))
+			val |= N3000_NIOS_INIT_REQ_FEC_MODE_NO_ALL;
+		else if (!strcmp(fec_mode, "kr"))
+			val |= N3000_NIOS_INIT_REQ_FEC_MODE_KR_ALL;
+		else if (!strcmp(fec_mode, "rs"))
+			val |= N3000_NIOS_INIT_REQ_FEC_MODE_RS_ALL;
+		else
+			return -EINVAL;
 
 		ret = regmap_write(nn->regmap, N3000_NIOS_INIT, val);
 		if (ret)
