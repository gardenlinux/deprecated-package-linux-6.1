From 274f4cefdb7090c69e2c9e0320c4aa944bf1d5af Mon Sep 17 00:00:00 2001
From: Russ Weight <russell.h.weight@intel.com>
Date: Mon, 4 Oct 2021 16:02:24 -0700
Subject: [PATCH] fpga: m10bmc-sec: Expose SDM SR provisioning status
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Provide a new read-only sysfs file, sdm_sr_provision_status, to report
the N6000 SDM key provisioning status.

Co-developed-by: Russ Weight <russell.h.weight@intel.com>
Signed-off-by: Russ Weight <russell.h.weight@intel.com>
Signed-off-by: Ilpo JÃ¤rvinen <ilpo.jarvinen@linux.intel.com>
---
 .../sysfs-driver-intel-m10-bmc-sec-update     |  8 +++
 drivers/fpga/intel-m10-bmc-sec-update.c       | 57 +++++++++++++++++--
 include/linux/mfd/intel-m10-bmc.h             | 31 ++++++++++
 3 files changed, 91 insertions(+), 5 deletions(-)

diff --git a/Documentation/ABI/testing/sysfs-driver-intel-m10-bmc-sec-update b/Documentation/ABI/testing/sysfs-driver-intel-m10-bmc-sec-update
index ab8e90380e8d..e043ea4a6b79 100644
--- a/Documentation/ABI/testing/sysfs-driver-intel-m10-bmc-sec-update
+++ b/Documentation/ABI/testing/sysfs-driver-intel-m10-bmc-sec-update
@@ -60,6 +60,14 @@ Description:	Read only. Returns number of times the secure update
 		staging area has been flashed.
 		Format: "%u".
 
+What:		/sys/bus/platform/drivers/intel-m10bmc-sec-update/.../security/sdm_sr_provision_status
+Date:		November 2021
+KernelVersion:  5.16
+Contact:	Russ Weight <russell.h.weight@intel.com>
+Description:	Read-only. Read this file to determine the status of SDM
+		static region key provisioning.
+		Format: "0x%x".
+
 What:		/sys/bus/platform/drivers/intel-m10bmc-sec-update/.../control/available_images
 Date:		Nov 2021
 KernelVersion:  5.16
diff --git a/drivers/fpga/intel-m10-bmc-sec-update.c b/drivers/fpga/intel-m10-bmc-sec-update.c
index 85e689999f4d..9ff06ff749b0 100644
--- a/drivers/fpga/intel-m10-bmc-sec-update.c
+++ b/drivers/fpga/intel-m10-bmc-sec-update.c
@@ -45,6 +45,7 @@ struct m10bmc_sec_ops {
 	int (*rsu_status)(struct m10bmc_sec *sec);
 	struct image_load *image_load;		/* terminated with { } member */
 	const struct fpga_power_on *poc;	/* power on image configuration */
+	bool sec_visible;
 };
 
 struct m10bmc_sec {
@@ -61,11 +62,27 @@ static void log_error_regs(struct m10bmc_sec *sec, u32 doorbell)
 {
 	const struct m10bmc_csr_map *csr_map = sec->m10bmc->info->csr_map;
 	u32 auth_result;
+	int status;
 
 	dev_err(sec->dev, "Doorbell: 0x%08x\n", doorbell);
 
 	if (!m10bmc_sys_read(sec->m10bmc, csr_map->auth_result, &auth_result))
 		dev_err(sec->dev, "RSU auth result: 0x%08x\n", auth_result);
+
+	status = sec->ops->rsu_status(sec);
+	if (status < 0)
+		return;
+
+	if (status == RSU_STAT_SDM_PR_FAILED) {
+		if (!m10bmc_sys_read(sec->m10bmc, M10BMC_PMCI_SDM_PR_STS, &status))
+			dev_err(sec->dev, "SDM Key Program Status: 0x%08x\n", status);
+	} else if (status == RSU_STAT_SDM_SR_SDM_FAILED ||
+		   status == RSU_STAT_SDM_KEY_FAILED) {
+		if (!m10bmc_sys_read(sec->m10bmc, M10BMC_PMCI_CERT_PROG_STS, &status))
+			dev_err(sec->dev, "Certificate Program Status: 0x%08x\n", status);
+		if (!m10bmc_sys_read(sec->m10bmc, M10BMC_PMCI_CERT_SPEC_STS, &status))
+			dev_err(sec->dev, "Certificate Specific Status: 0x%08x\n", status);
+	}
 }
 
 static int m10bmc_sec_progress_status(struct m10bmc_sec *sec, u32 *doorbell_reg,
@@ -160,7 +177,7 @@ static int pmci_sec_fpga_image_load(struct m10bmc_sec *sec, unsigned int val)
 				  PMCI_FPGA_RP_LOAD);
 }
 
-static int pmci_sec_sdm_image_load(struct m10bmc_sec *sec)
+static int pmci_sec_sdm_sr_image_load(struct m10bmc_sec *sec)
 {
 	const struct m10bmc_csr_map *csr_map = sec->m10bmc->info->csr_map;
 
@@ -402,8 +419,8 @@ static struct image_load n6000_image_load_hndlrs[] = {
 		.load_image = pmci_sec_fpga_image_load_2,
 	},
 	{
-		.name = "sdm",
-		.load_image = pmci_sec_sdm_image_load,
+		.name = "sdm_sr",
+		.load_image = pmci_sec_sdm_sr_image_load,
 	},
 	{}
 };
@@ -616,6 +633,33 @@ static ssize_t flash_count_show(struct device *dev,
 }
 static DEVICE_ATTR_RO(flash_count);
 
+static ssize_t sdm_sr_provision_status_show(struct device *dev,
+					    struct device_attribute *attr, char *buf)
+{
+	struct m10bmc_sec *sec = dev_get_drvdata(dev);
+	const struct m10bmc_csr_map *csr_map = sec->m10bmc->info->csr_map;
+	u32 status;
+	int ret;
+
+	ret = m10bmc_sys_read(sec->m10bmc, csr_map->base + M10BMC_PMCI_SDM_SR_CTRL_STS, &status);
+	if (ret)
+		return ret;
+
+	return sysfs_emit(buf, "0x%x\n", (unsigned int)FIELD_GET(PMCI_SDM_SR_PGM_ERROR, status));
+}
+static DEVICE_ATTR_RO(sdm_sr_provision_status);
+
+static umode_t m10bmc_security_is_visible(struct kobject *kobj, struct attribute *attr, int n)
+{
+	struct m10bmc_sec *sec = dev_get_drvdata(kobj_to_dev(kobj));
+
+	if (!sec->ops->sec_visible &&
+	    attr == &dev_attr_sdm_sr_provision_status.attr)
+		return 0;
+
+	return attr->mode;
+}
+
 static struct attribute *m10bmc_security_attrs[] = {
 	&dev_attr_flash_count.attr,
 	&dev_attr_bmc_root_entry_hash.attr,
@@ -624,12 +668,14 @@ static struct attribute *m10bmc_security_attrs[] = {
 	&dev_attr_sr_canceled_csks.attr,
 	&dev_attr_pr_canceled_csks.attr,
 	&dev_attr_bmc_canceled_csks.attr,
+	&dev_attr_sdm_sr_provision_status.attr,
 	NULL,
 };
 
 static struct attribute_group m10bmc_security_attr_group = {
 	.name = "security",
 	.attrs = m10bmc_security_attrs,
+	.is_visible = m10bmc_security_is_visible,
 };
 
 static enum fpga_image
@@ -868,7 +914,7 @@ static ssize_t image_load_store(struct device *dev,
 static DEVICE_ATTR_WO(image_load);
 
 static umode_t
-m10bmc_is_visible(struct kobject *kobj, struct attribute *attr, int n)
+m10bmc_image_is_visible(struct kobject *kobj, struct attribute *attr, int n)
 {
 	struct m10bmc_sec *sec = dev_get_drvdata(kobj_to_dev(kobj));
 
@@ -893,7 +939,7 @@ static struct attribute *m10bmc_control_attrs[] = {
 static struct attribute_group m10bmc_control_attr_group = {
 	.name = "control",
 	.attrs = m10bmc_control_attrs,
-	.is_visible = m10bmc_is_visible,
+	.is_visible = m10bmc_image_is_visible,
 };
 
 static const struct attribute_group *m10bmc_sec_attr_groups[] = {
@@ -1305,6 +1351,7 @@ static const struct m10bmc_sec_ops m10sec_n6000_ops = {
 	.rsu_status = m10bmc_sec_n6000_rsu_status,
 	.image_load = n6000_image_load_hndlrs,
 	.poc = &pmci_power_on_image,
+	.sec_visible = true,
 };
 
 #define SEC_UPDATE_LEN_MAX 32
diff --git a/include/linux/mfd/intel-m10-bmc.h b/include/linux/mfd/intel-m10-bmc.h
index 76ddb844fc94..5def4a67e979 100644
--- a/include/linux/mfd/intel-m10-bmc.h
+++ b/include/linux/mfd/intel-m10-bmc.h
@@ -133,6 +133,32 @@
 #define RSU_STAT_NON_INC		0x6
 #define RSU_STAT_ERASE_FAIL		0x7
 #define RSU_STAT_WEAROUT		0x8
+#define RSU_STAT_PMCI_SS_FAIL		0x9
+#define RSU_STAT_FLASH_CMD		0xa
+#define RSU_STAT_FACTORY_UNVERITY	0xb
+#define RSU_STAT_FACTORY_ACTIVE		0xc
+#define RSU_STAT_POWER_DOWN		0xd
+#define RSU_STAT_CANCELLATION		0xe
+#define RSU_STAT_HASH			0xf
+#define RSU_STAT_FLASH_ACCESS		0x10
+#define RSU_STAT_SDM_PR_CERT		0x20
+#define RSU_STAT_SDM_PR_NIOS_BUSY	0x21
+#define RSU_STAT_SDM_PR_TIMEOUT		0x22
+#define RSU_STAT_SDM_PR_FAILED		0x23
+#define RSU_STAT_SDM_PR_MISMATCH	0x24
+#define RSU_STAT_SDM_PR_FLUSH		0x25
+#define RSU_STAT_SDM_SR_CERT		0x30
+#define RSU_STAT_SDM_SR_NIOS_BUSY	0x31
+#define RSU_STAT_SDM_SR_TIMEOUT		0x32
+#define RSU_STAT_SDM_SR_SDM_FAILED	0x33
+#define RSU_STAT_SDM_SR_MISMATCH	0x34
+#define RSU_STAT_SDM_SR_FLUSH		0x35
+#define RSU_STAT_SDM_KEY_CERT		0x40
+#define RSU_STAT_SDM_KEY_NIOS_BUSY	0x41
+#define RSU_STAT_SDM_KEY_TIMEOUT	0x42
+#define RSU_STAT_SDM_KEY_FAILED		0x43
+#define RSU_STAT_SDM_KEY_MISMATCH	0x44
+#define RSU_STAT_SDM_KEY_FLUSH		0x45
 #define RSU_STAT_NIOS_OK		0x80
 #define RSU_STAT_USER_OK		0x81
 #define RSU_STAT_FACTORY_OK		0x82
@@ -200,6 +226,11 @@
 
 #define M10BMC_PMCI_SDM_SR_CTRL_STS		0x230
 #define PMCI_SDM_SR_IMG_REQ			BIT(0)
+#define PMCI_SDM_SR_PGM_ERROR			GENMASK(23, 16)
+
+#define M10BMC_PMCI_SDM_PR_STS			0x820
+#define M10BMC_PMCI_CERT_PROG_STS		0x824
+#define M10BMC_PMCI_CERT_SPEC_STS		0x828
 
 #define M10BMC_N6000_BUILD_VER			0x0
 #define NIOS2_N6000_FW_VERSION			0x4
