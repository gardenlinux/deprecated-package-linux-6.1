From 2b32841aff055f9ccdf02ab8e25e4762871ae207 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ilpo=20J=C3=A4rvinen?= <ilpo.jarvinen@linux.intel.com>
Date: Wed, 4 Jan 2023 16:26:45 +0200
Subject: [PATCH] mfd: intel-m10-bmc: Add C6100 support
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Add support for the C6100 FPGA card into Intel M10 BMC MFD driver.

Co-developed-by: Matthew Gerlach <matthew.gerlach@linux.intel.com>
Signed-off-by: Matthew Gerlach <matthew.gerlach@linux.intel.com>
Signed-off-by: Ilpo JÃ¤rvinen <ilpo.jarvinen@linux.intel.com>
---
 drivers/mfd/intel-m10-bmc-log.c   | 12 +++++++
 drivers/mfd/intel-m10-bmc-pmci.c  | 52 ++++++++++++++++++++++++++++++-
 include/linux/mfd/intel-m10-bmc.h | 16 ++++++++++
 3 files changed, 79 insertions(+), 1 deletion(-)

diff --git a/drivers/mfd/intel-m10-bmc-log.c b/drivers/mfd/intel-m10-bmc-log.c
index d5e64506c92f..12ef1100da79 100644
--- a/drivers/mfd/intel-m10-bmc-log.c
+++ b/drivers/mfd/intel-m10-bmc-log.c
@@ -237,11 +237,23 @@ static const struct m10bmc_log_cfg m10bmc_log_n6000_cfg = {
 	.bi_off = M10BMC_N6000_BOM_INFO_ADDR,
 };
 
+static const struct m10bmc_log_cfg m10bmc_log_c6100_cfg = {
+	.el_size = M10BMC_N6000_ERROR_LOG_SIZE,
+	.el_off = M10BMC_C6100_ERROR_LOG_ADDR,
+
+	.id_size = M10BMC_C6100_FPGA_IMAGE_DIR_SIZE,
+	.id_off = M10BMC_C6100_FPGA_IMAGE_DIR_ADDR,
+};
+
 static const struct platform_device_id intel_m10bmc_log_ids[] = {
 	{
 		.name = "n6000bmc-log",
 		.driver_data = (unsigned long)&m10bmc_log_n6000_cfg,
 	},
+	{
+		.name = "c6100bmc-log",
+		.driver_data = (unsigned long)&m10bmc_log_c6100_cfg,
+	},
 	{ }
 };
 
diff --git a/drivers/mfd/intel-m10-bmc-pmci.c b/drivers/mfd/intel-m10-bmc-pmci.c
index 3998a9ad31f2..65b0371318b2 100644
--- a/drivers/mfd/intel-m10-bmc-pmci.c
+++ b/drivers/mfd/intel-m10-bmc-pmci.c
@@ -255,6 +255,12 @@ static struct mfd_cell m10bmc_pmci_n6000_bmc_subdevs[] = {
 	{ .name = "n6000bmc-log" },
 };
 
+static struct mfd_cell m10bmc_pmci_c6100_bmc_subdevs[] = {
+	{ .name = "c6100bmc-hwmon" },
+	{ .name = "n6000bmc-sec-update" },
+	{ .name = "c6100bmc-log" },
+};
+
 static const struct regmap_range null_fw_handshake_regs[0];
 
 static const struct m10bmc_csr_map m10bmc_n6000_csr_map = {
@@ -281,6 +287,30 @@ static const struct m10bmc_csr_map m10bmc_n6000_csr_map = {
 	.sr_sdm_csk_reg = M10BMC_PMCI_SR_CSK,
 };
 
+static const struct m10bmc_csr_map m10bmc_c6100_csr_map = {
+	.base = M10BMC_N6000_SYS_BASE,
+	.build_version = M10BMC_N6000_BUILD_VER,
+	.fw_version = NIOS2_N6000_FW_VERSION,
+	.mac_low = M10BMC_N6000_MAC_LOW,
+	.mac_high = M10BMC_N6000_MAC_HIGH,
+	.doorbell = M10BMC_N6000_DOORBELL,
+	.auth_result = M10BMC_N6000_AUTH_RESULT,
+	.bmc_prog_addr = M10BMC_C6100_BMC_PROG_ADDR,
+	.bmc_reh_addr = M10BMC_C6100_BMC_REH_ADDR,
+	.bmc_magic = M10BMC_N6000_BMC_PROG_MAGIC,
+	.sr_prog_addr = M10BMC_C6100_SR_PROG_ADDR,
+	.sr_reh_addr = M10BMC_C6100_SR_REH_ADDR,
+	.sr_magic = M10BMC_N6000_SR_PROG_MAGIC,
+	.pr_prog_addr = M10BMC_C6100_PR_PROG_ADDR,
+	.pr_reh_addr = M10BMC_C6100_PR_REH_ADDR,
+	.pr_magic = M10BMC_N6000_PR_PROG_MAGIC,
+	.rsu_update_counter = M10BMC_C6100_STAGING_FLASH_COUNT,
+	.pr_sdm_reh_reg = M10BMC_PMCI_PR_RH0,
+	.pr_sdm_csk_reg = M10BMC_PMCI_PR_CSK,
+	.sr_sdm_reh_reg = M10BMC_PMCI_SR_RH0,
+	.sr_sdm_csk_reg = M10BMC_PMCI_SR_CSK,
+};
+
 static const struct intel_m10bmc_platform_info m10bmc_pmci_n6000 = {
 	.cells = m10bmc_pmci_n6000_bmc_subdevs,
 	.n_cells = ARRAY_SIZE(m10bmc_pmci_n6000_bmc_subdevs),
@@ -289,12 +319,32 @@ static const struct intel_m10bmc_platform_info m10bmc_pmci_n6000 = {
 	.csr_map = &m10bmc_n6000_csr_map,
 };
 
+static const struct intel_m10bmc_platform_info m10bmc_pmci_c6100 = {
+	.cells = m10bmc_pmci_c6100_bmc_subdevs,
+	.n_cells = ARRAY_SIZE(m10bmc_pmci_c6100_bmc_subdevs),
+	.handshake_sys_reg_ranges = null_fw_handshake_regs,
+	.handshake_sys_reg_nranges = 0,
+	.csr_map = &m10bmc_c6100_csr_map,
+};
+
 static int m10bmc_pmci_probe(struct dfl_device *ddev)
 {
+	const struct intel_m10bmc_platform_info *pinfo;
 	struct device *dev = &ddev->dev;
 	struct m10bmc_pmci_device *pmci;
 	int ret;
 
+	switch (ddev->revision) {
+	case 1:
+		pinfo = &m10bmc_pmci_n6000;
+		break;
+	case 2:
+		pinfo = &m10bmc_pmci_c6100;
+		break;
+	default:
+		return -ENODEV;
+	}
+
 	pmci = devm_kzalloc(dev, sizeof(*pmci), GFP_KERNEL);
 	if (!pmci)
 		return -ENOMEM;
@@ -317,7 +367,7 @@ static int m10bmc_pmci_probe(struct dfl_device *ddev)
 		goto destroy_mutex;
 	}
 
-	ret = m10bmc_dev_init(&pmci->m10bmc, &m10bmc_pmci_n6000);
+	ret = m10bmc_dev_init(&pmci->m10bmc, pinfo);
 	if (ret)
 		goto destroy_mutex;
 	return 0;
diff --git a/include/linux/mfd/intel-m10-bmc.h b/include/linux/mfd/intel-m10-bmc.h
index 9c4a5e6255d9..08d6d20f5eb8 100644
--- a/include/linux/mfd/intel-m10-bmc.h
+++ b/include/linux/mfd/intel-m10-bmc.h
@@ -276,6 +276,11 @@
 #define M10BMC_N6000_BOM_INFO_ADDR		0x7ff0000
 #define M10BMC_N6000_BOM_INFO_SIZE		0x2000
 
+#define M10BMC_C6100_ERROR_LOG_ADDR		0x00a80000
+
+#define M10BMC_C6100_FPGA_IMAGE_DIR_SIZE	0x30000
+#define M10BMC_C6100_FPGA_IMAGE_DIR_ADDR	0x00910000
+
 /* Addresses for security related data in FLASH */
 #define M10BMC_N6000_BMC_REH_ADDR		0x7ffc004
 #define M10BMC_N6000_BMC_PROG_ADDR		0x7ffc000
@@ -289,8 +294,19 @@
 #define M10BMC_N6000_PR_PROG_ADDR		0x7ffe000
 #define M10BMC_N6000_PR_PROG_MAGIC		0x5250
 
+#define M10BMC_C6100_BMC_REH_ADDR		0x00830004
+#define M10BMC_C6100_BMC_PROG_ADDR		0x00830000
+
+#define M10BMC_C6100_SR_REH_ADDR		0x00820004
+#define M10BMC_C6100_SR_PROG_ADDR		0x00820000
+
+#define M10BMC_C6100_PR_REH_ADDR		0x00810004
+#define M10BMC_C6100_PR_PROG_ADDR		0x00810000
+
 #define M10BMC_N6000_STAGING_FLASH_COUNT	0x7ff5000
 
+#define M10BMC_C6100_STAGING_FLASH_COUNT	0x00860000
+
 #define M10BMC_N6000_FLASH_MUX_CTRL		0x1d0
 #define M10BMC_N6000_FLASH_MUX_SELECTION	GENMASK(2, 0)
 #define M10BMC_N6000_FLASH_MUX_IDLE		0
